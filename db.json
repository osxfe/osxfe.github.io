{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/react-first-render.png","path":"images/react-first-render.png","modified":1,"renderable":0},{"_id":"source/images/react-component.png","path":"images/react-component.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1500987241000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1500987241000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1500987241000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1500987241000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1500987241000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1500987241000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1500987241000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1500987241000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1500987241000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1500987241000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1500987241000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1500987241000},{"_id":"themes/next/_config.yml","hash":"3b10a579ad826370a3963baa1074e6d757b81533","modified":1501124372000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1500987241000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1500987241000},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1500987241000},{"_id":"source/_drafts/all-about-async-hooks.md","hash":"e8f5a85d239baa04c7d969de3ce6dbbfbed389ba","modified":1524041951705},{"_id":"source/_posts/React.md","hash":"c466502a591c6b001347380f78293c6d6ceb805b","modified":1524041951707},{"_id":"source/_posts/Hash规则.md","hash":"cb5300570e855e9b12bcc5624684f2107a42beba","modified":1524041951706},{"_id":"source/_posts/guide-paper.md","hash":"a155f1f52f4c0e7349c29fce31a4fc87bfe492e0","modified":1524041951708},{"_id":"source/_posts/sourcemap-in-action.md","hash":"4ab7ba0b01ff66fbc3a5ea49e7f68957adbe094a","modified":1524041951708},{"_id":"source/categories/index.md","hash":"962d1882c66c02ae81718fcd067ef6076921d16c","modified":1500987241000},{"_id":"source/tags/index.md","hash":"223687eceec47904eb398898b7e819d2ed6fc07d","modified":1500987241000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1500987241000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"ff383596cc1671f389d4500e67e004ae300d083e","modified":1500987241000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1500987241000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1500987241000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1500987241000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1500987241000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1500987241000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1500987241000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1500987241000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1500987241000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1500987241000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1500987241000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1500987241000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1500987241000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1500987241000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1500987241000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1500987241000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1500987241000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1500987241000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1500987241000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1500987241000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1500987241000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1500987241000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1500987241000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1500987241000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1500987241000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1500987241000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1500987241000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"source/images/react-first-render.png","hash":"93ee2fa78ed1b084acd3f9ab99ce852867a579e3","modified":1504846323000},{"_id":"source/images/react-component.png","hash":"a7b9e07bee3f934b2080fe443439d9b06aaa438b","modified":1504844680000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500987241000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500987241000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1500987241000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1500987241000},{"_id":"themes/next/layout/_macro/post.swig","hash":"699a720943daf48afc85ce12719328aaf5e4d782","modified":1501221971000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1500987241000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3dac0f5af6a590ea49a3d172ff6fafbf50cc2604","modified":1500987241000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1500987241000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1500987241000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1500987241000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1500987241000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1500987241000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1500987241000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1500987241000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1500987241000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1500987241000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1500987241000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1500987241000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1500987241000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1500987241000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1500987241000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1500987241000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1500987241000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1500987241000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1500987241000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1500987241000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1500987241000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1500987241000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1500987241000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1500987241000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1500987241000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1500987241000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500987241000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500987241000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"60a21ade49a826e74d02a7043cc58a2897b719d3","modified":1500987241000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500987241000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500987241000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500987241000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500987241000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500987241000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500987241000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500987241000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500987241000},{"_id":"themes/next/source/images/logo.png","hash":"083cd5c79b24fa2b4c1b0655c4d2dae6d384efc8","modified":1501124216000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500987241000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500987241000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500987241000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500987241000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500987241000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1500987241000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1500987241000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1500987241000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1500987241000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1500987241000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1500987241000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1500987241000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1500987241000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1500987241000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1500987241000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1500987241000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1500987241000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1500987241000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1500987241000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1500987241000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1500987241000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1500987241000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1500987241000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1500987241000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"ceceb93029d98cd63a689ad08e25fbe7f6b7ee1c","modified":1500987241000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1500987241000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1500987241000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1500987241000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500987241000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500987241000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1500987241000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500987241000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500987241000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500987241000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1500987241000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1500987241000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500987241000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500987241000},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1500987241000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500987241000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500987241000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1500292397000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1500292397000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1500987241000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500987241000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1500987241000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1500987241000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1500987241000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1500987241000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1500987241000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1500987241000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1500987241000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500987241000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500987241000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500987241000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500987241000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500987241000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500987241000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1500987241000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1500987241000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500987241000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500987241000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500987241000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500987241000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1500987241000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b5074a61d04757b6adf8f757668b9fea01730a6c","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1500987241000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1500987241000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1500987241000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1500987241000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1500987241000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1500987241000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1500987241000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500987241000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500987241000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500987241000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500987241000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500987241000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1500987241000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500987241000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500987241000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500987241000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500987241000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500987241000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500987241000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500987241000},{"_id":"public/atom.xml","hash":"197514fa12c508f119bef1066cdbfa4697caad2f","modified":1540386782740},{"_id":"public/search.xml","hash":"44f11bd285cded734df5c4f3d388edd08412a289","modified":1540386782741},{"_id":"public/categories/index.html","hash":"07836f7e61badcfa0b2606d31cf443f15d29933e","modified":1540386782758},{"_id":"public/tags/index.html","hash":"36b1fdf3e9ba665b7a9b932f4f8e7b2cbf61380c","modified":1540386782758},{"_id":"public/2018/04/18/sourcemap-in-action/index.html","hash":"da14f447b9ad0e41d417c2f2c77098f6975847f0","modified":1540386782758},{"_id":"public/2018/04/18/guide-paper/index.html","hash":"9003f55b7540df4540a7e4398b2cef7cde8b8d33","modified":1540386782758},{"_id":"public/2017/12/07/Hash规则/index.html","hash":"bdb61899c16bec47452d25056a80b45dc4d3241d","modified":1540386782758},{"_id":"public/2017/07/17/React/index.html","hash":"29606dd1aade4758225c3ac5823e93175072bd6f","modified":1540386782758},{"_id":"public/archives/index.html","hash":"717bfc6927853dec24f003770fad7cab21bf4639","modified":1540386782758},{"_id":"public/archives/2017/index.html","hash":"065a908f6489b182a2a83e6ae65878faa02612c3","modified":1540386782758},{"_id":"public/archives/2017/07/index.html","hash":"b2dda3f89ae4864b1d1924b740f3ffdf4e3ecbc9","modified":1540386782758},{"_id":"public/archives/2017/12/index.html","hash":"9fcf15d2fbe65e47e39cb3d9380c943260f49e6b","modified":1540386782759},{"_id":"public/archives/2018/index.html","hash":"744dc12e772793f86606005948c700afd8ed1c40","modified":1540386782759},{"_id":"public/archives/2018/04/index.html","hash":"df89bb3f8b0b6cd4e91b9e50acadb70d03d14fdf","modified":1540386782759},{"_id":"public/categories/React/index.html","hash":"6e2134b2ae9581868f90ab279f8c3cd0cb68f516","modified":1540386782759},{"_id":"public/index.html","hash":"d0131bb535b02d7bf69947cd30ab912d5d8d9e92","modified":1540386782759},{"_id":"public/tags/React-ES6/index.html","hash":"e87695e1e20a6dd3e9a24d101e29676020511e68","modified":1540386782759},{"_id":"public/tags/Webpack-ES6/index.html","hash":"3f7a7c8bffb9fec82eed4d5eefb3a890edd7d0ee","modified":1540386782759},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1540386782765},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540386782765},{"_id":"public/images/avatar.jpeg","hash":"60a21ade49a826e74d02a7043cc58a2897b719d3","modified":1540386782765},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1540386782765},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1540386782765},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1540386782765},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1540386782765},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1540386782765},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1540386782765},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1540386782765},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540386782765},{"_id":"public/images/logo.png","hash":"083cd5c79b24fa2b4c1b0655c4d2dae6d384efc8","modified":1540386782766},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540386782766},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1540386782766},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1540386782766},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540386782766},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1540386782766},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1540386782766},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1540386782766},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1540386782766},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1540386782766},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1540386782766},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1540386782766},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1540386782766},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1540386782766},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1540386782767},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1540386782767},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1540386782767},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1540386782767},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1540386782767},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1540386783193},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1540386783203},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1540386783215},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1540386783215},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1540386783215},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1540386783215},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1540386783215},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1540386783215},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1540386783215},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1540386783215},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1540386783215},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1540386783215},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1540386783215},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1540386783215},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1540386783215},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1540386783215},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1540386783215},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1540386783215},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1540386783216},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1540386783216},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1540386783216},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1540386783216},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1540386783216},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1540386783216},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1540386783216},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1540386783216},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1540386783217},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1540386783217},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1540386783217},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1540386783217},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1540386783217},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1540386783217},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1540386783217},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1540386783217},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1540386783217},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1540386783217},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1540386783217},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1540386783217},{"_id":"public/css/main.css","hash":"3888cf9fbb2375d6c04c836341ca5df4d498d512","modified":1540386783217},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1540386783217},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1540386783217},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1540386783217},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1540386783217},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1540386783217},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1540386783218},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1540386783218},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1540386783218},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1540386783218},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1540386783218},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1540386783218},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1540386783218},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1540386783218},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1540386783218},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1540386783218},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1540386783218},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1540386783218},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1540386783218},{"_id":"public/images/react-first-render.png","hash":"93ee2fa78ed1b084acd3f9ab99ce852867a579e3","modified":1540386783219},{"_id":"public/images/react-component.png","hash":"a7b9e07bee3f934b2080fe443439d9b06aaa438b","modified":1540386783219},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1540386783219},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1540386783219},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1540386783219},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1540386783228}],"Category":[{"name":"node","_id":"cjnn6in990003owt1pql8ucru"},{"name":"React","_id":"cjnn6in9e0008owt1s2e7rbqs"}],"Data":[],"Page":[{"title":"categories","date":"2017-07-17T12:42:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-17 20:42:22\ntype: \"categories\"\n---\n","updated":"2017-07-25T12:54:01.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjnn6in970001owt1puqew12w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-07-17T12:40:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-17 20:40:34\ntype: \"tags\"\n---\n","updated":"2017-07-25T12:54:01.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjnn6indo000iowt15yg3j0dl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"async_hooks解析","date":"2017-07-28T15:00:30.000Z","author":"Wanzhi Du","_content":"\n本篇文章意图对async_hooks做较为详细的分析，并介绍一些使用案例.\n\n## async_hooks介绍\n\n## async_hooks使用案例","source":"_drafts/all-about-async-hooks.md","raw":"---\ntitle: async_hooks解析\ndate: 2017-07-28 23:00:30\ntags:\n  -node\n  -async_hooks\ncategories: node\nauthor: Wanzhi Du\n---\n\n本篇文章意图对async_hooks做较为详细的分析，并介绍一些使用案例.\n\n## async_hooks介绍\n\n## async_hooks使用案例","slug":"all-about-async-hooks","published":0,"updated":"2018-04-18T08:59:11.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnn6in930000owt1heqrzni7","content":"<p>本篇文章意图对async_hooks做较为详细的分析，并介绍一些使用案例.</p>\n<h2 id=\"async-hooks介绍\"><a href=\"#async-hooks介绍\" class=\"headerlink\" title=\"async_hooks介绍\"></a>async_hooks介绍</h2><h2 id=\"async-hooks使用案例\"><a href=\"#async-hooks使用案例\" class=\"headerlink\" title=\"async_hooks使用案例\"></a>async_hooks使用案例</h2>","site":{"data":{}},"excerpt":"","more":"<p>本篇文章意图对async_hooks做较为详细的分析，并介绍一些使用案例.</p>\n<h2 id=\"async-hooks介绍\"><a href=\"#async-hooks介绍\" class=\"headerlink\" title=\"async_hooks介绍\"></a>async_hooks介绍</h2><h2 id=\"async-hooks使用案例\"><a href=\"#async-hooks使用案例\" class=\"headerlink\" title=\"async_hooks使用案例\"></a>async_hooks使用案例</h2>"},{"title":"React原理浅谈","date":"2017-07-17T12:43:30.000Z","author":"Jian Wang","_content":"\n## 一、React简介\n\n### 1、Virtual DOM\nReact为此引入了虚拟DOM的机制，在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。\n\n### 2、组件化\n组件是封装起来的具有独立功能的UI部件\n<img src=\"/images/react-component.png\">\n\n#### React组件应具有如下特征\n- 可组合(Composeable): 一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部;如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件\n- 可重用(Reusable): 每个组件都是具有独立功能的，它可以被使用在多个UI场景\n- 可维护(Maintainable): 每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\n\n\n## 二、React原理分析\n\n#### ReactJs的核心内容主要包括\n+ 虚拟dom对象(Virtual DOM)\n+ 虚拟dom差异化算法（diff algorithm）\n+ 单向数据流渲染（Data Flow）\n+ 组件生命周期\n+ 事件处理\n\n### 1、ReactJs首次渲染\n<img src=\"/images/react-first-render.png\">\n\n虚拟dom元素分为两种，一种是浏览器自带的基本元素比如 div p input form 这种，一种是自定义的元素。\n文本节点，不算虚拟dom，但是ReacJs为了保持渲染的一致性, 在文本节点外面包了一层span标记，形成简化版的component（ReactDOMTextComponent）。\n\n#### 文本节点渲染\n```js\n//component类，用来表示文本在渲染，更新，删除时应该做些什么事情\nfunction ReactDOMTextComponent(text) {\n    //存下当前的字符串\n    this._currentElement = '' + text;\n    //用来标识当前component\n    this._rootNodeID = null;\n}\n\n//component渲染时生成的dom结构\nReactDOMTextComponent.prototype.mountComponent = function(rootID) {\n    this._rootNodeID = rootID;\n    return '<span data-reactid=\"' + rootID + '\">' + this._currentElement + '</span>';\n}\n\n\n//component工厂  用来返回一个component实例\nfunction instantiateReactComponent(node){\n    if(typeof node === 'string' || typeof node === 'number'){\n        return new ReactDOMTextComponent(node)\n    }\n}\n\n\nReact = {\n    nextReactRootIndex:0,\n    render:function(element,container){\n\n        var componentInstance = instantiateReactComponent(element);\n        var markup = componentInstance.mountComponent(React.nextReactRootIndex++);\n        $(container).html(markup);\n        //触发完成mount的事件\n        $(document).trigger('mountReady');    }\n}\n```\n- React.render 作为入口负责调用渲染\n- ReactDOMTextComponent是一个component类定义，定义对于这种文本类型的节点，在渲染，更新，删除时应该做什么操作\n- instantiateReactComponent用来根据element的类型（现在只有一种string类型），返回一个component的实例。其实就是个类工厂\n\n#### 基本元素渲染\n在React中使用React.createElement来创建一个虚拟dom元素, 例如:\n```js\nfunction hello(){\n    alert('hello')\n}\n\n\nvar element = React.createElement('div',{id:'test',onclick:hello},'click me')\n\nReact.render(element,document.getElementById(\"container\"))\n```\n当render的不是文本而是浏览器的基本元素时，使用另外一种component来处理它渲染时应该返回的内容，由于使用的是工厂方法instantiateReactComponent，不管来了什么类型的node，都可以负责生产出一个负责渲染的component实例。这样render完全不需要做任何修改，只需要再做一种对应的component类型ReactDOMComponent就行了。\n虚拟dom的渲染逻辑，本质上还是个递归渲染的东西，reactElement会递归渲染自己的子节点。可以看到我们通过instantiateReactComponent屏蔽了子节点的差异，只需要使用不同的componet类，这样都能保证通过mountComponent最终拿到渲染后的内容。\n\n#### 自定义元素渲染\n随着前端技术的发展浏览器的那些基本元素已经满足不了我们的需求了，ReactJs的element.type可以是简单的字符串也可以是个类，而且这个类还有自己的生命周期管理。\n\n>生命周期共提供了10个不同的API\n1.getDefaultProps\n2.getInitialState\n3.componentWillMount\n4.render\n5.componentDidMount\n6.componentWillReceiveProps\n7.shouldComponentUpdate\n8.componentWillUpdate\n9.componentDidUpdate\n10.componentWillUnmount\n\n自定义元素,React.createElement接受的不再是字符串，而是一个class\n```js\nvar HelloMessage = React.createClass({\n  getInitialState: function() {\n    return {type: 'say:'};\n  },\n  componentWillMount: function() {\n    console.log('我就要开始渲染了。。。')\n  },\n  componentDidMount: function() {\n    console.log('我已经渲染好了。。。')\n  },\n  render: function() {\n    return React.createElement(\"div\", null,this.state.type, \"Hello \", this.props.name);\n  }\n});\n\nReact.render(React.createElement(HelloMessage, {name: \"John\"}), document.getElementById(\"container\"));\n```\n- React.createClass生成一个自定义标记类，带有基本的生命周期：\n- getInitialState 获取最初的属性值this.state\n- componentWillmount 在组件准备渲染时调用\n- componentDidMount 在组件渲染完成后调用\n\n通过上面的两种类型知道，需要未自定义元素也提供一个componet类，在这个类里我们会实例化ReactClass，并且管理生命周期，还有父子组件依赖。\n\n```js\nfunction ReactCompositeComponent(element){\n    //存放元素element对象\n    this._currentElement = element;\n    //存放唯一标识\n    this._rootNodeID = null;\n    //存放对应的ReactClass的实例\n    this._instance = null;\n}\n\n//用于返回当前自定义元素渲染时应该返回的内容\nReactCompositeComponent.prototype.mountComponent = function(rootID){\n    this._rootNodeID = rootID;\n    //拿到当前元素对应的属性值\n    var publicProps = this._currentElement.props;\n    //拿到对应的ReactClass\n    var ReactClass = this._currentElement.type;\n    // Initialize the public class\n    var inst = new ReactClass(publicProps);\n    this._instance = inst;\n    //保留对当前comonent的引用，下面更新会用到\n    inst._reactInternalInstance = this;\n\n    if (inst.componentWillMount) {\n        inst.componentWillMount();\n        //这里在原始的reactjs其实还有一层处理，就是  componentWillMount调用setstate，不会触发rerender而是自动提前合并，这里为了保持简单，就略去了\n    }\n    //调用ReactClass的实例的render方法,返回一个element或者一个文本节点\n    var renderedElement = this._instance.render();\n    //得到renderedElement对应的component类实例\n    var renderedComponentInstance = instantiateReactComponent(renderedElement);\n    this._renderedComponent = renderedComponentInstance; //存起来留作后用\n\n    //拿到渲染之后的字符串内容，将当前的_rootNodeID传给render出的节点\n    var renderedMarkup = renderedComponentInstance.mountComponent(this._rootNodeID);\n\n    //之前我们在React.render方法最后触发了mountReady事件，所以这里可以监听，在渲染完成后会触发。\n    $(document).on('mountReady', function() {\n        //调用inst.componentDidMount\n        inst.componentDidMount && inst.componentDidMount();\n    });\n\n    return renderedMarkup;\n}\n```\n### 2、更新机制\n一般在reactjs中我们需要更新时都是调用的setState\n```js\n//setState\nReactClass.prototype.setState = function(newState) {\n\n    //还记得我们在ReactCompositeComponent里面mount的时候 做了赋值\n    //所以这里可以拿到 对应的ReactCompositeComponent的实例_reactInternalInstance\n    this._reactInternalInstance.receiveComponent(null, newState);\n}\n```\n- setState主要调用了对应的component的receiveComponent来实现更新。所有的挂载，更新都应该交给对应的component来管理\n- 就像所有的component都实现了mountComponent来处理第一次渲染，所有的componet类都应该实现receiveComponent用来处理自己的更新\n\n#### 自定义元素的receiveComponent\n```js\n//更新\nReactCompositeComponent.prototype.receiveComponent = function(nextElement, newState) {\n\n    //如果接受了新的，就使用最新的element\n    this._currentElement = nextElement || this._currentElement\n\n    var inst = this._instance;\n    //合并state\n    var nextState = $.extend(inst.state, newState);\n    var nextProps = this._currentElement.props;\n\n\n    //改写state\n    inst.state = nextState;\n\n\n    //如果inst有shouldComponentUpdate并且返回false。说明组件本身判断不要更新，就直接返回。\n    if (inst.shouldComponentUpdate && (inst.shouldComponentUpdate(nextProps, nextState) === false)) return;\n\n    //生命周期管理，如果有componentWillUpdate，就调用，表示开始要更新了。\n    if (inst.componentWillUpdate) inst.componentWillUpdate(nextProps, nextState);\n\n\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    //重新执行render拿到对应的新element;\n    var nextRenderedElement = this._instance.render();\n\n\n    //判断是需要更新还是直接就重新渲染\n    //注意这里的_shouldUpdateReactComponent跟上面的不同哦 这个是全局的方法\n    if (_shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n        //如果需要更新，就继续调用子节点的receiveComponent的方法，传入新的element更新子节点。\n        prevComponentInstance.receiveComponent(nextRenderedElement);\n        //调用componentDidUpdate表示更新完成了\n        inst.componentDidUpdate && inst.componentDidUpdate();\n\n    } else {\n        //如果发现完全是不同的两种element，那就干脆重新渲染了\n        var thisID = this._rootNodeID;\n        //重新new一个对应的component，\n        this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);\n        //重新生成对应的元素内容\n        var nextMarkup = _renderedComponent.mountComponent(thisID);\n        //替换整个节点\n        $('[data-reactid=\"' + this._rootNodeID + '\"]').replaceWith(nextMarkup);\n\n    }\n\n}\n\n//用来判定两个element需不需要更新\n//这里的key是我们createElement的时候可以选择性的传入的。用来标识这个element，当发现key不同时，我们就可以直接重新渲染，不需要去更新了。\nvar _shouldUpdateReactComponent ＝ function(prevElement, nextElement){\n    if (prevElement != null && nextElement != null) {\n    var prevType = typeof prevElement;\n    var nextType = typeof nextElement;\n    if (prevType === 'string' || prevType === 'number') {\n      return nextType === 'string' || nextType === 'number';\n    } else {\n      return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n    }\n  }\n  return false;\n}\n```\n- inst.shouldComponentUpdate是实例方法，当我们不希望某次setState后更新，我们就可以重写这个方法，返回false就好了。\n- _shouldUpdateReactComponent是一个全局方法，这个是一种reactjs的优化机制。用来决定是直接全部替换，还是使用很细微的改动。当两次render出来的子节点key不同，直接全部重新渲染一遍，替换就好了。否则，我们就得来个递归的更新，保证最小化的更新机制，这样可以不会有太大的闪烁。\n\n首先合并改动，生成最新的state,props然后拿以前的render返回的element跟现在最新调用render生成的element进行对比（_shouldUpdateReactComponent），看看需不需要更新，如果要更新就继续调用对应的component类对应的receiveComponent就好啦，其实就是直接当甩手掌柜，事情直接丢给手下去办了。当然还有种情况是，两次生成的element差别太大，就不是一个类型的，那就直接重新生成一份新的代码重新渲染一次。\n\n- 自定义元素的更新，主要是更新render出的节点，做甩手掌柜交给render出的节点的对应component去管理更新。\n- text节点的更新很简单，直接更新文案。\n- 浏览器基本元素的更新，分为两块：1.先是更新属性，对比出前后属性的不同，局部更新。并且处理特殊属性，比如事件绑定。2.更新子节点，子节点更新主要是找出差异对象，找差异对象的时候使用_shouldUpdateReactComponent来判断，如果是可以直接更新的就会递归调用子节点的更新，这样也会递归查找差异对象。\n                  \n#### 更新属性\n```js\nReactDOMComponent.prototype._updateDOMProperties = function(lastProps, nextProps) {\n    var propKey;\n    //遍历，当一个老的属性不在新的属性集合里时，需要删除掉。\n\n    for (propKey in lastProps) {\n        //新的属性里有，或者propKey是在原型上的直接跳过。这样剩下的都是不在新属性集合里的。需要删除\n        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {\n            continue;\n        }\n        //对于那种特殊的，比如这里的事件监听的属性我们需要去掉监听\n        if (/^on[A-Za-z]/.test(propKey)) {\n            var eventType = propKey.replace('on', '');\n            //针对当前的节点取消事件代理\n            $(document).undelegate('[data-reactid=\"' + this._rootNodeID + '\"]', eventType, lastProps[propKey]);\n            continue;\n        }\n\n        //从dom上删除不需要的属性\n        $('[data-reactid=\"' + this._rootNodeID + '\"]').removeAttr(propKey)\n    }\n\n    //对于新的属性，需要写到dom节点上\n    for (propKey in nextProps) {\n        //对于事件监听的属性我们需要特殊处理\n        if (/^on[A-Za-z]/.test(propKey)) {\n            var eventType = propKey.replace('on', '');\n            //以前如果已经有，说明有了监听，需要先去掉\n            lastProps[propKey] && $(document).undelegate('[data-reactid=\"' + this._rootNodeID + '\"]', eventType, lastProps[propKey]);\n            //针对当前的节点添加事件代理,以_rootNodeID为命名空间\n            $(document).delegate('[data-reactid=\"' + this._rootNodeID + '\"]', eventType + '.' + this._rootNodeID, nextProps[propKey]);\n            continue;\n        }\n\n        if (propKey == 'children') continue;\n\n        //添加新的属性，或者是更新老的同名属性\n        $('[data-reactid=\"' + this._rootNodeID + '\"]').prop(propKey, nextProps[propKey])\n    }\n\n}\n```                \n#### 更新子节点\n更新子节点包含两个部分，一个是递归的分析差异，把差异添加到队列中。然后在合适的时机调用_patch把差异应用到dom上\n```js\nReactDOMComponent.prototype.receiveComponent = function(nextElement){\n    var lastProps = this._currentElement.props;\n    var nextProps = nextElement.props;\n\n    this._currentElement = nextElement;\n    //需要单独的更新属性\n    this._updateDOMProperties(lastProps,nextProps);\n    //再更新子节点\n    this._updateDOMChildren(nextProps.children);\n}\n\n//全局的更新深度标识\nvar updateDepth = 0;\n//全局的更新队列，所有的差异都存在这里\nvar diffQueue = [];\n\nReactDOMComponent.prototype._updateDOMChildren = function(nextChildrenElements){\n    updateDepth++\n    //_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。\n    this._diff(diffQueue,nextChildrenElements);\n    updateDepth--\n    if(updateDepth == 0){\n        //在需要的时候调用patch，执行具体的dom操作\n        this._patch(diffQueue);\n        diffQueue = [];\n    }\n}\n```\n- _diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。\n- _patch主要就是挨个遍历差异队列，遍历两次，第一次删除掉所有需要变动的节点，然后第二次插入新的节点还有修改的节点。这里为什么可以直接挨个的插入呢？原因就是我们在diff阶段添加差异节点到差异队列时，本身就是有序的，也就是说对于新增节点（包括move和insert的）在队列里的顺序就是最终dom的顺序，所以我们才可以挨个的直接根据index去塞入节点。\n\n#### _diff实现\n```js\n//差异更新的几种类型\nvar UPATE_TYPES = {\n    MOVE_EXISTING: 1,\n    REMOVE_NODE: 2,\n    INSERT_MARKUP: 3\n}\n\n\n//普通的children是一个数组，此方法把它转换成一个map,key就是element的key,如果是text节点或者element创建时并没有传入key,就直接用在数组里的index标识\nfunction flattenChildren(componentChildren) {\n    var child;\n    var name;\n    var childrenMap = {};\n    for (var i = 0; i < componentChildren.length; i++) {\n        child = componentChildren[i];\n        name = child && child._currentelement && child._currentelement.key ? child._currentelement.key : i.toString(36);\n        childrenMap[name] = child;\n    }\n    return childrenMap;\n}\n\n\n//主要用来生成子节点elements的component集合\n//这边注意，有个判断逻辑，如果发现是更新，就会继续使用以前的componentInstance,调用对应的receiveComponent。\n//如果是新的节点，就会重新生成一个新的componentInstance，\nfunction generateComponentChildren(prevChildren, nextChildrenElements) {\n    var nextChildren = {};\n    nextChildrenElements = nextChildrenElements || [];\n    $.each(nextChildrenElements, function(index, element) {\n        var name = element.key ? element.key : index;\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = element;\n\n        //调用_shouldUpdateReactComponent判断是否是更新\n        if (_shouldUpdateReactComponent(prevElement, nextElement)) {\n            //更新的话直接递归调用子节点的receiveComponent就好了\n            prevChild.receiveComponent(nextElement);\n            //然后继续使用老的component\n            nextChildren[name] = prevChild;\n        } else {\n            //对于没有老的，那就重新新增一个，重新生成一个component\n            var nextChildInstance = instantiateReactComponent(nextElement, null);\n            //使用新的component\n            nextChildren[name] = nextChildInstance;\n        }\n    })\n\n    return nextChildren;\n}\n\n\n\n//_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。\nReactDOMComponent.prototype._diff = function(diffQueue, nextChildrenElements) {\n  var self = this;\n  //拿到之前的子节点的 component类型对象的集合,这个是在刚开始渲染时赋值的\n  //_renderedChildren 本来是数组，我们搞成map\n  var prevChildren = flattenChildren(self._renderedChildren);\n  //生成新的子节点的component对象集合，这里注意，会复用老的component对象\n  var nextChildren = generateComponentChildren(prevChildren, nextChildrenElements);\n  //重新赋值_renderedChildren，使用最新的。\n  self._renderedChildren = []\n  $.each(nextChildren, function(key, instance) {\n    self._renderedChildren.push(instance);\n  })\n\n\n  var nextIndex = 0; //代表到达的新的节点的index\n  //通过对比两个集合的差异，组装差异节点添加到队列中\n  for (name in nextChildren) {\n    if (!nextChildren.hasOwnProperty(name)) {\n      continue;\n    }\n    var prevChild = prevChildren && prevChildren[name];\n    var nextChild = nextChildren[name];\n    //相同的话，说明是使用的同一个component,所以我们需要做移动的操作\n    if (prevChild === nextChild) {\n      //添加差异对象，类型：MOVE_EXISTING\n      diffQueue.push({\n        parentId: self._rootNodeID,\n        parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n        type: UPATE_TYPES.MOVE_EXISTING,\n        fromIndex: prevChild._mountIndex,\n        toIndex: nextIndex\n      })\n    } else { //如果不相同，说明是新增加的节点\n      //但是如果老的还存在，就是element不同，但是component一样。我们需要把它对应的老的element删除。\n      if (prevChild) {\n        //添加差异对象，类型：REMOVE_NODE\n        diffQueue.push({\n          parentId: self._rootNodeID,\n          parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n          type: UPATE_TYPES.REMOVE_NODE,\n          fromIndex: prevChild._mountIndex,\n          toIndex: null\n        })\n\n        //如果以前已经渲染过了，记得先去掉以前所有的事件监听，通过命名空间全部清空\n        if (prevChild._rootNodeID) {\n            $(document).undelegate('.' + prevChild._rootNodeID);\n        }\n\n      }\n      //新增加的节点，也组装差异对象放到队列里\n      //添加差异对象，类型：INSERT_MARKUP\n      diffQueue.push({\n        parentId: self._rootNodeID,\n        parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n        type: UPATE_TYPES.INSERT_MARKUP,\n        fromIndex: null,\n        toIndex: nextIndex,\n        markup: nextChild.mountComponent() //新增的节点，多一个此属性，表示新节点的dom内容\n      })\n    }\n    //更新mount的index\n    nextChild._mountIndex = nextIndex;\n    nextIndex++;\n  }\n\n\n\n  //对于老的节点里有，新的节点里没有的那些，也全都删除掉\n  for (name in prevChildren) {\n    if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n      //添加差异对象，类型：REMOVE_NODE\n      diffQueue.push({\n        parentId: self._rootNodeID,\n        parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n        type: UPATE_TYPES.REMOVE_NODE,\n        fromIndex: prevChild._mountIndex,\n        toIndex: null\n      })\n      //如果以前已经渲染过了，记得先去掉以前所有的事件监听\n      if (prevChildren[name]._rootNodeID) {\n        $(document).undelegate('.' + prevChildren[name]._rootNodeID);\n      }\n    }\n  }\n}\n```\n#### __patch的实现\n```js\n//用于将childNode插入到指定位置\nfunction insertChildAt(parentNode, childNode, index) {\n    var beforeChild = parentNode.children().get(index);\n    beforeChild ? childNode.insertBefore(beforeChild) : childNode.appendTo(parentNode);\n}\n\nReactDOMComponent.prototype._patch = function(updates) {\n    var update;\n    var initialChildren = {};\n    var deleteChildren = [];\n    for (var i = 0; i < updates.length; i++) {\n        update = updates[i];\n        if (update.type === UPATE_TYPES.MOVE_EXISTING || update.type === UPATE_TYPES.REMOVE_NODE) {\n            var updatedIndex = update.fromIndex;\n            var updatedChild = $(update.parentNode.children().get(updatedIndex));\n            var parentID = update.parentID;\n\n            //所有需要更新的节点都保存下来，方便后面使用\n            initialChildren[parentID] = initialChildren[parentID] || [];\n            //使用parentID作为简易命名空间\n            initialChildren[parentID][updatedIndex] = updatedChild;\n\n\n            //所有需要修改的节点先删除,对于move的，后面再重新插入到正确的位置即可\n            deleteChildren.push(updatedChild)\n        }\n\n    }\n\n    //删除所有需要先删除的\n    $.each(deleteChildren, function(index, child) {\n        $(child).remove();\n    })\n\n\n    //再遍历一次，这次处理新增的节点，还有修改的节点这里也要重新插入\n    for (var k = 0; k < updates.length; k++) {\n        update = updates[k];\n        switch (update.type) {\n            case UPATE_TYPES.INSERT_MARKUP:\n                insertChildAt(update.parentNode, $(update.markup), update.toIndex);\n                break;\n            case UPATE_TYPES.MOVE_EXISTING:\n                insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n                break;\n            case UPATE_TYPES.REMOVE_NODE:\n                // 什么都不需要做，因为上面已经帮忙删除掉了\n                break;\n        }\n    }\n}\n```\n\n#### 差异更新类型\n- MOVE_EXISTING: 新的component类型在老的集合里也有，并且element是可以更新的类型，在generateComponentChildren我们已经调用了receiveComponent，这种情况下prevChild=nextChild,那我们就需要做出移动的操作，可以复用以前的dom节点。\n- INSERT_MARKUP: 新的component类型不在老的集合里，那么就是全新的节点，我们需要插入新的节点\n- REMOVE_NODE: 老的component类型，在新的集合里也有，但是对应的element不同了不能直接复用直接更新，那我们也得删除。\n- REMOVE_NODE: 老的component不在新的集合里的，我们需要删除。\n","source":"_posts/React.md","raw":"---\ntitle: React原理浅谈\ndate: 2017-07-17 20:43:30\ntags:\n  -React\n  -ES6\ncategories: React\nauthor: Jian Wang\n\n---\n\n## 一、React简介\n\n### 1、Virtual DOM\nReact为此引入了虚拟DOM的机制，在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。\n\n### 2、组件化\n组件是封装起来的具有独立功能的UI部件\n<img src=\"/images/react-component.png\">\n\n#### React组件应具有如下特征\n- 可组合(Composeable): 一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部;如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件\n- 可重用(Reusable): 每个组件都是具有独立功能的，它可以被使用在多个UI场景\n- 可维护(Maintainable): 每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\n\n\n## 二、React原理分析\n\n#### ReactJs的核心内容主要包括\n+ 虚拟dom对象(Virtual DOM)\n+ 虚拟dom差异化算法（diff algorithm）\n+ 单向数据流渲染（Data Flow）\n+ 组件生命周期\n+ 事件处理\n\n### 1、ReactJs首次渲染\n<img src=\"/images/react-first-render.png\">\n\n虚拟dom元素分为两种，一种是浏览器自带的基本元素比如 div p input form 这种，一种是自定义的元素。\n文本节点，不算虚拟dom，但是ReacJs为了保持渲染的一致性, 在文本节点外面包了一层span标记，形成简化版的component（ReactDOMTextComponent）。\n\n#### 文本节点渲染\n```js\n//component类，用来表示文本在渲染，更新，删除时应该做些什么事情\nfunction ReactDOMTextComponent(text) {\n    //存下当前的字符串\n    this._currentElement = '' + text;\n    //用来标识当前component\n    this._rootNodeID = null;\n}\n\n//component渲染时生成的dom结构\nReactDOMTextComponent.prototype.mountComponent = function(rootID) {\n    this._rootNodeID = rootID;\n    return '<span data-reactid=\"' + rootID + '\">' + this._currentElement + '</span>';\n}\n\n\n//component工厂  用来返回一个component实例\nfunction instantiateReactComponent(node){\n    if(typeof node === 'string' || typeof node === 'number'){\n        return new ReactDOMTextComponent(node)\n    }\n}\n\n\nReact = {\n    nextReactRootIndex:0,\n    render:function(element,container){\n\n        var componentInstance = instantiateReactComponent(element);\n        var markup = componentInstance.mountComponent(React.nextReactRootIndex++);\n        $(container).html(markup);\n        //触发完成mount的事件\n        $(document).trigger('mountReady');    }\n}\n```\n- React.render 作为入口负责调用渲染\n- ReactDOMTextComponent是一个component类定义，定义对于这种文本类型的节点，在渲染，更新，删除时应该做什么操作\n- instantiateReactComponent用来根据element的类型（现在只有一种string类型），返回一个component的实例。其实就是个类工厂\n\n#### 基本元素渲染\n在React中使用React.createElement来创建一个虚拟dom元素, 例如:\n```js\nfunction hello(){\n    alert('hello')\n}\n\n\nvar element = React.createElement('div',{id:'test',onclick:hello},'click me')\n\nReact.render(element,document.getElementById(\"container\"))\n```\n当render的不是文本而是浏览器的基本元素时，使用另外一种component来处理它渲染时应该返回的内容，由于使用的是工厂方法instantiateReactComponent，不管来了什么类型的node，都可以负责生产出一个负责渲染的component实例。这样render完全不需要做任何修改，只需要再做一种对应的component类型ReactDOMComponent就行了。\n虚拟dom的渲染逻辑，本质上还是个递归渲染的东西，reactElement会递归渲染自己的子节点。可以看到我们通过instantiateReactComponent屏蔽了子节点的差异，只需要使用不同的componet类，这样都能保证通过mountComponent最终拿到渲染后的内容。\n\n#### 自定义元素渲染\n随着前端技术的发展浏览器的那些基本元素已经满足不了我们的需求了，ReactJs的element.type可以是简单的字符串也可以是个类，而且这个类还有自己的生命周期管理。\n\n>生命周期共提供了10个不同的API\n1.getDefaultProps\n2.getInitialState\n3.componentWillMount\n4.render\n5.componentDidMount\n6.componentWillReceiveProps\n7.shouldComponentUpdate\n8.componentWillUpdate\n9.componentDidUpdate\n10.componentWillUnmount\n\n自定义元素,React.createElement接受的不再是字符串，而是一个class\n```js\nvar HelloMessage = React.createClass({\n  getInitialState: function() {\n    return {type: 'say:'};\n  },\n  componentWillMount: function() {\n    console.log('我就要开始渲染了。。。')\n  },\n  componentDidMount: function() {\n    console.log('我已经渲染好了。。。')\n  },\n  render: function() {\n    return React.createElement(\"div\", null,this.state.type, \"Hello \", this.props.name);\n  }\n});\n\nReact.render(React.createElement(HelloMessage, {name: \"John\"}), document.getElementById(\"container\"));\n```\n- React.createClass生成一个自定义标记类，带有基本的生命周期：\n- getInitialState 获取最初的属性值this.state\n- componentWillmount 在组件准备渲染时调用\n- componentDidMount 在组件渲染完成后调用\n\n通过上面的两种类型知道，需要未自定义元素也提供一个componet类，在这个类里我们会实例化ReactClass，并且管理生命周期，还有父子组件依赖。\n\n```js\nfunction ReactCompositeComponent(element){\n    //存放元素element对象\n    this._currentElement = element;\n    //存放唯一标识\n    this._rootNodeID = null;\n    //存放对应的ReactClass的实例\n    this._instance = null;\n}\n\n//用于返回当前自定义元素渲染时应该返回的内容\nReactCompositeComponent.prototype.mountComponent = function(rootID){\n    this._rootNodeID = rootID;\n    //拿到当前元素对应的属性值\n    var publicProps = this._currentElement.props;\n    //拿到对应的ReactClass\n    var ReactClass = this._currentElement.type;\n    // Initialize the public class\n    var inst = new ReactClass(publicProps);\n    this._instance = inst;\n    //保留对当前comonent的引用，下面更新会用到\n    inst._reactInternalInstance = this;\n\n    if (inst.componentWillMount) {\n        inst.componentWillMount();\n        //这里在原始的reactjs其实还有一层处理，就是  componentWillMount调用setstate，不会触发rerender而是自动提前合并，这里为了保持简单，就略去了\n    }\n    //调用ReactClass的实例的render方法,返回一个element或者一个文本节点\n    var renderedElement = this._instance.render();\n    //得到renderedElement对应的component类实例\n    var renderedComponentInstance = instantiateReactComponent(renderedElement);\n    this._renderedComponent = renderedComponentInstance; //存起来留作后用\n\n    //拿到渲染之后的字符串内容，将当前的_rootNodeID传给render出的节点\n    var renderedMarkup = renderedComponentInstance.mountComponent(this._rootNodeID);\n\n    //之前我们在React.render方法最后触发了mountReady事件，所以这里可以监听，在渲染完成后会触发。\n    $(document).on('mountReady', function() {\n        //调用inst.componentDidMount\n        inst.componentDidMount && inst.componentDidMount();\n    });\n\n    return renderedMarkup;\n}\n```\n### 2、更新机制\n一般在reactjs中我们需要更新时都是调用的setState\n```js\n//setState\nReactClass.prototype.setState = function(newState) {\n\n    //还记得我们在ReactCompositeComponent里面mount的时候 做了赋值\n    //所以这里可以拿到 对应的ReactCompositeComponent的实例_reactInternalInstance\n    this._reactInternalInstance.receiveComponent(null, newState);\n}\n```\n- setState主要调用了对应的component的receiveComponent来实现更新。所有的挂载，更新都应该交给对应的component来管理\n- 就像所有的component都实现了mountComponent来处理第一次渲染，所有的componet类都应该实现receiveComponent用来处理自己的更新\n\n#### 自定义元素的receiveComponent\n```js\n//更新\nReactCompositeComponent.prototype.receiveComponent = function(nextElement, newState) {\n\n    //如果接受了新的，就使用最新的element\n    this._currentElement = nextElement || this._currentElement\n\n    var inst = this._instance;\n    //合并state\n    var nextState = $.extend(inst.state, newState);\n    var nextProps = this._currentElement.props;\n\n\n    //改写state\n    inst.state = nextState;\n\n\n    //如果inst有shouldComponentUpdate并且返回false。说明组件本身判断不要更新，就直接返回。\n    if (inst.shouldComponentUpdate && (inst.shouldComponentUpdate(nextProps, nextState) === false)) return;\n\n    //生命周期管理，如果有componentWillUpdate，就调用，表示开始要更新了。\n    if (inst.componentWillUpdate) inst.componentWillUpdate(nextProps, nextState);\n\n\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    //重新执行render拿到对应的新element;\n    var nextRenderedElement = this._instance.render();\n\n\n    //判断是需要更新还是直接就重新渲染\n    //注意这里的_shouldUpdateReactComponent跟上面的不同哦 这个是全局的方法\n    if (_shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n        //如果需要更新，就继续调用子节点的receiveComponent的方法，传入新的element更新子节点。\n        prevComponentInstance.receiveComponent(nextRenderedElement);\n        //调用componentDidUpdate表示更新完成了\n        inst.componentDidUpdate && inst.componentDidUpdate();\n\n    } else {\n        //如果发现完全是不同的两种element，那就干脆重新渲染了\n        var thisID = this._rootNodeID;\n        //重新new一个对应的component，\n        this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);\n        //重新生成对应的元素内容\n        var nextMarkup = _renderedComponent.mountComponent(thisID);\n        //替换整个节点\n        $('[data-reactid=\"' + this._rootNodeID + '\"]').replaceWith(nextMarkup);\n\n    }\n\n}\n\n//用来判定两个element需不需要更新\n//这里的key是我们createElement的时候可以选择性的传入的。用来标识这个element，当发现key不同时，我们就可以直接重新渲染，不需要去更新了。\nvar _shouldUpdateReactComponent ＝ function(prevElement, nextElement){\n    if (prevElement != null && nextElement != null) {\n    var prevType = typeof prevElement;\n    var nextType = typeof nextElement;\n    if (prevType === 'string' || prevType === 'number') {\n      return nextType === 'string' || nextType === 'number';\n    } else {\n      return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n    }\n  }\n  return false;\n}\n```\n- inst.shouldComponentUpdate是实例方法，当我们不希望某次setState后更新，我们就可以重写这个方法，返回false就好了。\n- _shouldUpdateReactComponent是一个全局方法，这个是一种reactjs的优化机制。用来决定是直接全部替换，还是使用很细微的改动。当两次render出来的子节点key不同，直接全部重新渲染一遍，替换就好了。否则，我们就得来个递归的更新，保证最小化的更新机制，这样可以不会有太大的闪烁。\n\n首先合并改动，生成最新的state,props然后拿以前的render返回的element跟现在最新调用render生成的element进行对比（_shouldUpdateReactComponent），看看需不需要更新，如果要更新就继续调用对应的component类对应的receiveComponent就好啦，其实就是直接当甩手掌柜，事情直接丢给手下去办了。当然还有种情况是，两次生成的element差别太大，就不是一个类型的，那就直接重新生成一份新的代码重新渲染一次。\n\n- 自定义元素的更新，主要是更新render出的节点，做甩手掌柜交给render出的节点的对应component去管理更新。\n- text节点的更新很简单，直接更新文案。\n- 浏览器基本元素的更新，分为两块：1.先是更新属性，对比出前后属性的不同，局部更新。并且处理特殊属性，比如事件绑定。2.更新子节点，子节点更新主要是找出差异对象，找差异对象的时候使用_shouldUpdateReactComponent来判断，如果是可以直接更新的就会递归调用子节点的更新，这样也会递归查找差异对象。\n                  \n#### 更新属性\n```js\nReactDOMComponent.prototype._updateDOMProperties = function(lastProps, nextProps) {\n    var propKey;\n    //遍历，当一个老的属性不在新的属性集合里时，需要删除掉。\n\n    for (propKey in lastProps) {\n        //新的属性里有，或者propKey是在原型上的直接跳过。这样剩下的都是不在新属性集合里的。需要删除\n        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {\n            continue;\n        }\n        //对于那种特殊的，比如这里的事件监听的属性我们需要去掉监听\n        if (/^on[A-Za-z]/.test(propKey)) {\n            var eventType = propKey.replace('on', '');\n            //针对当前的节点取消事件代理\n            $(document).undelegate('[data-reactid=\"' + this._rootNodeID + '\"]', eventType, lastProps[propKey]);\n            continue;\n        }\n\n        //从dom上删除不需要的属性\n        $('[data-reactid=\"' + this._rootNodeID + '\"]').removeAttr(propKey)\n    }\n\n    //对于新的属性，需要写到dom节点上\n    for (propKey in nextProps) {\n        //对于事件监听的属性我们需要特殊处理\n        if (/^on[A-Za-z]/.test(propKey)) {\n            var eventType = propKey.replace('on', '');\n            //以前如果已经有，说明有了监听，需要先去掉\n            lastProps[propKey] && $(document).undelegate('[data-reactid=\"' + this._rootNodeID + '\"]', eventType, lastProps[propKey]);\n            //针对当前的节点添加事件代理,以_rootNodeID为命名空间\n            $(document).delegate('[data-reactid=\"' + this._rootNodeID + '\"]', eventType + '.' + this._rootNodeID, nextProps[propKey]);\n            continue;\n        }\n\n        if (propKey == 'children') continue;\n\n        //添加新的属性，或者是更新老的同名属性\n        $('[data-reactid=\"' + this._rootNodeID + '\"]').prop(propKey, nextProps[propKey])\n    }\n\n}\n```                \n#### 更新子节点\n更新子节点包含两个部分，一个是递归的分析差异，把差异添加到队列中。然后在合适的时机调用_patch把差异应用到dom上\n```js\nReactDOMComponent.prototype.receiveComponent = function(nextElement){\n    var lastProps = this._currentElement.props;\n    var nextProps = nextElement.props;\n\n    this._currentElement = nextElement;\n    //需要单独的更新属性\n    this._updateDOMProperties(lastProps,nextProps);\n    //再更新子节点\n    this._updateDOMChildren(nextProps.children);\n}\n\n//全局的更新深度标识\nvar updateDepth = 0;\n//全局的更新队列，所有的差异都存在这里\nvar diffQueue = [];\n\nReactDOMComponent.prototype._updateDOMChildren = function(nextChildrenElements){\n    updateDepth++\n    //_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。\n    this._diff(diffQueue,nextChildrenElements);\n    updateDepth--\n    if(updateDepth == 0){\n        //在需要的时候调用patch，执行具体的dom操作\n        this._patch(diffQueue);\n        diffQueue = [];\n    }\n}\n```\n- _diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。\n- _patch主要就是挨个遍历差异队列，遍历两次，第一次删除掉所有需要变动的节点，然后第二次插入新的节点还有修改的节点。这里为什么可以直接挨个的插入呢？原因就是我们在diff阶段添加差异节点到差异队列时，本身就是有序的，也就是说对于新增节点（包括move和insert的）在队列里的顺序就是最终dom的顺序，所以我们才可以挨个的直接根据index去塞入节点。\n\n#### _diff实现\n```js\n//差异更新的几种类型\nvar UPATE_TYPES = {\n    MOVE_EXISTING: 1,\n    REMOVE_NODE: 2,\n    INSERT_MARKUP: 3\n}\n\n\n//普通的children是一个数组，此方法把它转换成一个map,key就是element的key,如果是text节点或者element创建时并没有传入key,就直接用在数组里的index标识\nfunction flattenChildren(componentChildren) {\n    var child;\n    var name;\n    var childrenMap = {};\n    for (var i = 0; i < componentChildren.length; i++) {\n        child = componentChildren[i];\n        name = child && child._currentelement && child._currentelement.key ? child._currentelement.key : i.toString(36);\n        childrenMap[name] = child;\n    }\n    return childrenMap;\n}\n\n\n//主要用来生成子节点elements的component集合\n//这边注意，有个判断逻辑，如果发现是更新，就会继续使用以前的componentInstance,调用对应的receiveComponent。\n//如果是新的节点，就会重新生成一个新的componentInstance，\nfunction generateComponentChildren(prevChildren, nextChildrenElements) {\n    var nextChildren = {};\n    nextChildrenElements = nextChildrenElements || [];\n    $.each(nextChildrenElements, function(index, element) {\n        var name = element.key ? element.key : index;\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = element;\n\n        //调用_shouldUpdateReactComponent判断是否是更新\n        if (_shouldUpdateReactComponent(prevElement, nextElement)) {\n            //更新的话直接递归调用子节点的receiveComponent就好了\n            prevChild.receiveComponent(nextElement);\n            //然后继续使用老的component\n            nextChildren[name] = prevChild;\n        } else {\n            //对于没有老的，那就重新新增一个，重新生成一个component\n            var nextChildInstance = instantiateReactComponent(nextElement, null);\n            //使用新的component\n            nextChildren[name] = nextChildInstance;\n        }\n    })\n\n    return nextChildren;\n}\n\n\n\n//_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。\nReactDOMComponent.prototype._diff = function(diffQueue, nextChildrenElements) {\n  var self = this;\n  //拿到之前的子节点的 component类型对象的集合,这个是在刚开始渲染时赋值的\n  //_renderedChildren 本来是数组，我们搞成map\n  var prevChildren = flattenChildren(self._renderedChildren);\n  //生成新的子节点的component对象集合，这里注意，会复用老的component对象\n  var nextChildren = generateComponentChildren(prevChildren, nextChildrenElements);\n  //重新赋值_renderedChildren，使用最新的。\n  self._renderedChildren = []\n  $.each(nextChildren, function(key, instance) {\n    self._renderedChildren.push(instance);\n  })\n\n\n  var nextIndex = 0; //代表到达的新的节点的index\n  //通过对比两个集合的差异，组装差异节点添加到队列中\n  for (name in nextChildren) {\n    if (!nextChildren.hasOwnProperty(name)) {\n      continue;\n    }\n    var prevChild = prevChildren && prevChildren[name];\n    var nextChild = nextChildren[name];\n    //相同的话，说明是使用的同一个component,所以我们需要做移动的操作\n    if (prevChild === nextChild) {\n      //添加差异对象，类型：MOVE_EXISTING\n      diffQueue.push({\n        parentId: self._rootNodeID,\n        parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n        type: UPATE_TYPES.MOVE_EXISTING,\n        fromIndex: prevChild._mountIndex,\n        toIndex: nextIndex\n      })\n    } else { //如果不相同，说明是新增加的节点\n      //但是如果老的还存在，就是element不同，但是component一样。我们需要把它对应的老的element删除。\n      if (prevChild) {\n        //添加差异对象，类型：REMOVE_NODE\n        diffQueue.push({\n          parentId: self._rootNodeID,\n          parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n          type: UPATE_TYPES.REMOVE_NODE,\n          fromIndex: prevChild._mountIndex,\n          toIndex: null\n        })\n\n        //如果以前已经渲染过了，记得先去掉以前所有的事件监听，通过命名空间全部清空\n        if (prevChild._rootNodeID) {\n            $(document).undelegate('.' + prevChild._rootNodeID);\n        }\n\n      }\n      //新增加的节点，也组装差异对象放到队列里\n      //添加差异对象，类型：INSERT_MARKUP\n      diffQueue.push({\n        parentId: self._rootNodeID,\n        parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n        type: UPATE_TYPES.INSERT_MARKUP,\n        fromIndex: null,\n        toIndex: nextIndex,\n        markup: nextChild.mountComponent() //新增的节点，多一个此属性，表示新节点的dom内容\n      })\n    }\n    //更新mount的index\n    nextChild._mountIndex = nextIndex;\n    nextIndex++;\n  }\n\n\n\n  //对于老的节点里有，新的节点里没有的那些，也全都删除掉\n  for (name in prevChildren) {\n    if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n      //添加差异对象，类型：REMOVE_NODE\n      diffQueue.push({\n        parentId: self._rootNodeID,\n        parentNode: $('[data-reactid=' + self._rootNodeID + ']'),\n        type: UPATE_TYPES.REMOVE_NODE,\n        fromIndex: prevChild._mountIndex,\n        toIndex: null\n      })\n      //如果以前已经渲染过了，记得先去掉以前所有的事件监听\n      if (prevChildren[name]._rootNodeID) {\n        $(document).undelegate('.' + prevChildren[name]._rootNodeID);\n      }\n    }\n  }\n}\n```\n#### __patch的实现\n```js\n//用于将childNode插入到指定位置\nfunction insertChildAt(parentNode, childNode, index) {\n    var beforeChild = parentNode.children().get(index);\n    beforeChild ? childNode.insertBefore(beforeChild) : childNode.appendTo(parentNode);\n}\n\nReactDOMComponent.prototype._patch = function(updates) {\n    var update;\n    var initialChildren = {};\n    var deleteChildren = [];\n    for (var i = 0; i < updates.length; i++) {\n        update = updates[i];\n        if (update.type === UPATE_TYPES.MOVE_EXISTING || update.type === UPATE_TYPES.REMOVE_NODE) {\n            var updatedIndex = update.fromIndex;\n            var updatedChild = $(update.parentNode.children().get(updatedIndex));\n            var parentID = update.parentID;\n\n            //所有需要更新的节点都保存下来，方便后面使用\n            initialChildren[parentID] = initialChildren[parentID] || [];\n            //使用parentID作为简易命名空间\n            initialChildren[parentID][updatedIndex] = updatedChild;\n\n\n            //所有需要修改的节点先删除,对于move的，后面再重新插入到正确的位置即可\n            deleteChildren.push(updatedChild)\n        }\n\n    }\n\n    //删除所有需要先删除的\n    $.each(deleteChildren, function(index, child) {\n        $(child).remove();\n    })\n\n\n    //再遍历一次，这次处理新增的节点，还有修改的节点这里也要重新插入\n    for (var k = 0; k < updates.length; k++) {\n        update = updates[k];\n        switch (update.type) {\n            case UPATE_TYPES.INSERT_MARKUP:\n                insertChildAt(update.parentNode, $(update.markup), update.toIndex);\n                break;\n            case UPATE_TYPES.MOVE_EXISTING:\n                insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n                break;\n            case UPATE_TYPES.REMOVE_NODE:\n                // 什么都不需要做，因为上面已经帮忙删除掉了\n                break;\n        }\n    }\n}\n```\n\n#### 差异更新类型\n- MOVE_EXISTING: 新的component类型在老的集合里也有，并且element是可以更新的类型，在generateComponentChildren我们已经调用了receiveComponent，这种情况下prevChild=nextChild,那我们就需要做出移动的操作，可以复用以前的dom节点。\n- INSERT_MARKUP: 新的component类型不在老的集合里，那么就是全新的节点，我们需要插入新的节点\n- REMOVE_NODE: 老的component类型，在新的集合里也有，但是对应的element不同了不能直接复用直接更新，那我们也得删除。\n- REMOVE_NODE: 老的component不在新的集合里的，我们需要删除。\n","slug":"React","published":1,"updated":"2018-04-18T08:59:11.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnn6in980002owt1sw84rbul","content":"<h2 id=\"一、React简介\"><a href=\"#一、React简介\" class=\"headerlink\" title=\"一、React简介\"></a>一、React简介</h2><h3 id=\"1、Virtual-DOM\"><a href=\"#1、Virtual-DOM\" class=\"headerlink\" title=\"1、Virtual DOM\"></a>1、Virtual DOM</h3><p>React为此引入了虚拟DOM的机制，在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。</p>\n<h3 id=\"2、组件化\"><a href=\"#2、组件化\" class=\"headerlink\" title=\"2、组件化\"></a>2、组件化</h3><p>组件是封装起来的具有独立功能的UI部件<br><img src=\"/images/react-component.png\"></p>\n<h4 id=\"React组件应具有如下特征\"><a href=\"#React组件应具有如下特征\" class=\"headerlink\" title=\"React组件应具有如下特征\"></a>React组件应具有如下特征</h4><ul>\n<li>可组合(Composeable): 一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部;如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件</li>\n<li>可重用(Reusable): 每个组件都是具有独立功能的，它可以被使用在多个UI场景</li>\n<li>可维护(Maintainable): 每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>\n<h2 id=\"二、React原理分析\"><a href=\"#二、React原理分析\" class=\"headerlink\" title=\"二、React原理分析\"></a>二、React原理分析</h2><h4 id=\"ReactJs的核心内容主要包括\"><a href=\"#ReactJs的核心内容主要包括\" class=\"headerlink\" title=\"ReactJs的核心内容主要包括\"></a>ReactJs的核心内容主要包括</h4><ul>\n<li>虚拟dom对象(Virtual DOM)</li>\n<li>虚拟dom差异化算法（diff algorithm）</li>\n<li>单向数据流渲染（Data Flow）</li>\n<li>组件生命周期</li>\n<li>事件处理</li>\n</ul>\n<h3 id=\"1、ReactJs首次渲染\"><a href=\"#1、ReactJs首次渲染\" class=\"headerlink\" title=\"1、ReactJs首次渲染\"></a>1、ReactJs首次渲染</h3><p><img src=\"/images/react-first-render.png\"></p>\n<p>虚拟dom元素分为两种，一种是浏览器自带的基本元素比如 div p input form 这种，一种是自定义的元素。<br>文本节点，不算虚拟dom，但是ReacJs为了保持渲染的一致性, 在文本节点外面包了一层span标记，形成简化版的component（ReactDOMTextComponent）。</p>\n<h4 id=\"文本节点渲染\"><a href=\"#文本节点渲染\" class=\"headerlink\" title=\"文本节点渲染\"></a>文本节点渲染</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//component类，用来表示文本在渲染，更新，删除时应该做些什么事情</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReactDOMTextComponent</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存下当前的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = <span class=\"string\">''</span> + text;</span><br><span class=\"line\">    <span class=\"comment\">//用来标识当前component</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//component渲染时生成的dom结构</span></span><br><span class=\"line\">ReactDOMTextComponent.prototype.mountComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rootID</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = rootID;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span data-reactid=\"'</span> + rootID + <span class=\"string\">'\"&gt;'</span> + <span class=\"keyword\">this</span>._currentElement + <span class=\"string\">'&lt;/span&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//component工厂  用来返回一个component实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">instantiateReactComponent</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> node === <span class=\"string\">'string'</span> || <span class=\"keyword\">typeof</span> node === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReactDOMTextComponent(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">React = &#123;</span><br><span class=\"line\">    nextReactRootIndex:<span class=\"number\">0</span>,</span><br><span class=\"line\">    render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element,container</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> componentInstance = instantiateReactComponent(element);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> markup = componentInstance.mountComponent(React.nextReactRootIndex++);</span><br><span class=\"line\">        $(container).html(markup);</span><br><span class=\"line\">        <span class=\"comment\">//触发完成mount的事件</span></span><br><span class=\"line\">        $(<span class=\"built_in\">document</span>).trigger(<span class=\"string\">'mountReady'</span>);    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>React.render 作为入口负责调用渲染</li>\n<li>ReactDOMTextComponent是一个component类定义，定义对于这种文本类型的节点，在渲染，更新，删除时应该做什么操作</li>\n<li>instantiateReactComponent用来根据element的类型（现在只有一种string类型），返回一个component的实例。其实就是个类工厂</li>\n</ul>\n<h4 id=\"基本元素渲染\"><a href=\"#基本元素渲染\" class=\"headerlink\" title=\"基本元素渲染\"></a>基本元素渲染</h4><p>在React中使用React.createElement来创建一个虚拟dom元素, 例如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> element = React.createElement(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">id</span>:<span class=\"string\">'test'</span>,<span class=\"attr\">onclick</span>:hello&#125;,<span class=\"string\">'click me'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">React.render(element,<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>当render的不是文本而是浏览器的基本元素时，使用另外一种component来处理它渲染时应该返回的内容，由于使用的是工厂方法instantiateReactComponent，不管来了什么类型的node，都可以负责生产出一个负责渲染的component实例。这样render完全不需要做任何修改，只需要再做一种对应的component类型ReactDOMComponent就行了。<br>虚拟dom的渲染逻辑，本质上还是个递归渲染的东西，reactElement会递归渲染自己的子节点。可以看到我们通过instantiateReactComponent屏蔽了子节点的差异，只需要使用不同的componet类，这样都能保证通过mountComponent最终拿到渲染后的内容。</p>\n<h4 id=\"自定义元素渲染\"><a href=\"#自定义元素渲染\" class=\"headerlink\" title=\"自定义元素渲染\"></a>自定义元素渲染</h4><p>随着前端技术的发展浏览器的那些基本元素已经满足不了我们的需求了，ReactJs的element.type可以是简单的字符串也可以是个类，而且这个类还有自己的生命周期管理。</p>\n<blockquote>\n<p>生命周期共提供了10个不同的API<br>1.getDefaultProps<br>2.getInitialState<br>3.componentWillMount<br>4.render<br>5.componentDidMount<br>6.componentWillReceiveProps<br>7.shouldComponentUpdate<br>8.componentWillUpdate<br>9.componentDidUpdate<br>10.componentWillUnmount</p>\n</blockquote>\n<p>自定义元素,React.createElement接受的不再是字符串，而是一个class<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">'say:'</span>&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentWillMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我就要开始渲染了。。。'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我已经渲染好了。。。'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> React.createElement(<span class=\"string\">\"div\"</span>, <span class=\"literal\">null</span>,<span class=\"keyword\">this</span>.state.type, <span class=\"string\">\"Hello \"</span>, <span class=\"keyword\">this</span>.props.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">React.render(React.createElement(HelloMessage, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"John\"</span>&#125;), <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>));</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>React.createClass生成一个自定义标记类，带有基本的生命周期：</li>\n<li>getInitialState 获取最初的属性值this.state</li>\n<li>componentWillmount 在组件准备渲染时调用</li>\n<li>componentDidMount 在组件渲染完成后调用</li>\n</ul>\n<p>通过上面的两种类型知道，需要未自定义元素也提供一个componet类，在这个类里我们会实例化ReactClass，并且管理生命周期，还有父子组件依赖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReactCompositeComponent</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放元素element对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = element;</span><br><span class=\"line\">    <span class=\"comment\">//存放唯一标识</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//存放对应的ReactClass的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于返回当前自定义元素渲染时应该返回的内容</span></span><br><span class=\"line\">ReactCompositeComponent.prototype.mountComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rootID</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = rootID;</span><br><span class=\"line\">    <span class=\"comment\">//拿到当前元素对应的属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> publicProps = <span class=\"keyword\">this</span>._currentElement.props;</span><br><span class=\"line\">    <span class=\"comment\">//拿到对应的ReactClass</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ReactClass = <span class=\"keyword\">this</span>._currentElement.type;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize the public class</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inst = <span class=\"keyword\">new</span> ReactClass(publicProps);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._instance = inst;</span><br><span class=\"line\">    <span class=\"comment\">//保留对当前comonent的引用，下面更新会用到</span></span><br><span class=\"line\">    inst._reactInternalInstance = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inst.componentWillMount) &#123;</span><br><span class=\"line\">        inst.componentWillMount();</span><br><span class=\"line\">        <span class=\"comment\">//这里在原始的reactjs其实还有一层处理，就是  componentWillMount调用setstate，不会触发rerender而是自动提前合并，这里为了保持简单，就略去了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用ReactClass的实例的render方法,返回一个element或者一个文本节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderedElement = <span class=\"keyword\">this</span>._instance.render();</span><br><span class=\"line\">    <span class=\"comment\">//得到renderedElement对应的component类实例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderedComponentInstance = instantiateReactComponent(renderedElement);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._renderedComponent = renderedComponentInstance; <span class=\"comment\">//存起来留作后用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//拿到渲染之后的字符串内容，将当前的_rootNodeID传给render出的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderedMarkup = renderedComponentInstance.mountComponent(<span class=\"keyword\">this</span>._rootNodeID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//之前我们在React.render方法最后触发了mountReady事件，所以这里可以监听，在渲染完成后会触发。</span></span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mountReady'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用inst.componentDidMount</span></span><br><span class=\"line\">        inst.componentDidMount &amp;&amp; inst.componentDidMount();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> renderedMarkup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、更新机制\"><a href=\"#2、更新机制\" class=\"headerlink\" title=\"2、更新机制\"></a>2、更新机制</h3><p>一般在reactjs中我们需要更新时都是调用的setState<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//setState</span></span><br><span class=\"line\">ReactClass.prototype.setState = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newState</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还记得我们在ReactCompositeComponent里面mount的时候 做了赋值</span></span><br><span class=\"line\">    <span class=\"comment\">//所以这里可以拿到 对应的ReactCompositeComponent的实例_reactInternalInstance</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._reactInternalInstance.receiveComponent(<span class=\"literal\">null</span>, newState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>setState主要调用了对应的component的receiveComponent来实现更新。所有的挂载，更新都应该交给对应的component来管理</li>\n<li>就像所有的component都实现了mountComponent来处理第一次渲染，所有的componet类都应该实现receiveComponent用来处理自己的更新</li>\n</ul>\n<h4 id=\"自定义元素的receiveComponent\"><a href=\"#自定义元素的receiveComponent\" class=\"headerlink\" title=\"自定义元素的receiveComponent\"></a>自定义元素的receiveComponent</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新</span></span><br><span class=\"line\">ReactCompositeComponent.prototype.receiveComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextElement, newState</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果接受了新的，就使用最新的element</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = nextElement || <span class=\"keyword\">this</span>._currentElement</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inst = <span class=\"keyword\">this</span>._instance;</span><br><span class=\"line\">    <span class=\"comment\">//合并state</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextState = $.extend(inst.state, newState);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextProps = <span class=\"keyword\">this</span>._currentElement.props;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//改写state</span></span><br><span class=\"line\">    inst.state = nextState;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果inst有shouldComponentUpdate并且返回false。说明组件本身判断不要更新，就直接返回。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inst.shouldComponentUpdate &amp;&amp; (inst.shouldComponentUpdate(nextProps, nextState) === <span class=\"literal\">false</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生命周期管理，如果有componentWillUpdate，就调用，表示开始要更新了。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inst.componentWillUpdate) inst.componentWillUpdate(nextProps, nextState);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevComponentInstance = <span class=\"keyword\">this</span>._renderedComponent;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevRenderedElement = prevComponentInstance._currentElement;</span><br><span class=\"line\">    <span class=\"comment\">//重新执行render拿到对应的新element;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextRenderedElement = <span class=\"keyword\">this</span>._instance.render();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是需要更新还是直接就重新渲染</span></span><br><span class=\"line\">    <span class=\"comment\">//注意这里的_shouldUpdateReactComponent跟上面的不同哦 这个是全局的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果需要更新，就继续调用子节点的receiveComponent的方法，传入新的element更新子节点。</span></span><br><span class=\"line\">        prevComponentInstance.receiveComponent(nextRenderedElement);</span><br><span class=\"line\">        <span class=\"comment\">//调用componentDidUpdate表示更新完成了</span></span><br><span class=\"line\">        inst.componentDidUpdate &amp;&amp; inst.componentDidUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果发现完全是不同的两种element，那就干脆重新渲染了</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> thisID = <span class=\"keyword\">this</span>._rootNodeID;</span><br><span class=\"line\">        <span class=\"comment\">//重新new一个对应的component，</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._renderedComponent = <span class=\"keyword\">this</span>._instantiateReactComponent(nextRenderedElement);</span><br><span class=\"line\">        <span class=\"comment\">//重新生成对应的元素内容</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextMarkup = _renderedComponent.mountComponent(thisID);</span><br><span class=\"line\">        <span class=\"comment\">//替换整个节点</span></span><br><span class=\"line\">        $(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>).replaceWith(nextMarkup);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用来判定两个element需不需要更新</span></span><br><span class=\"line\"><span class=\"comment\">//这里的key是我们createElement的时候可以选择性的传入的。用来标识这个element，当发现key不同时，我们就可以直接重新渲染，不需要去更新了。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _shouldUpdateReactComponent ＝ <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prevElement, nextElement</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevElement != <span class=\"literal\">null</span> &amp;&amp; nextElement != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevType = <span class=\"keyword\">typeof</span> prevElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextType = <span class=\"keyword\">typeof</span> nextElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevType === <span class=\"string\">'string'</span> || prevType === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextType === <span class=\"string\">'string'</span> || nextType === <span class=\"string\">'number'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextType === <span class=\"string\">'object'</span> &amp;&amp; prevElement.type === nextElement.type &amp;&amp; prevElement.key === nextElement.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>inst.shouldComponentUpdate是实例方法，当我们不希望某次setState后更新，我们就可以重写这个方法，返回false就好了。</li>\n<li>_shouldUpdateReactComponent是一个全局方法，这个是一种reactjs的优化机制。用来决定是直接全部替换，还是使用很细微的改动。当两次render出来的子节点key不同，直接全部重新渲染一遍，替换就好了。否则，我们就得来个递归的更新，保证最小化的更新机制，这样可以不会有太大的闪烁。</li>\n</ul>\n<p>首先合并改动，生成最新的state,props然后拿以前的render返回的element跟现在最新调用render生成的element进行对比（_shouldUpdateReactComponent），看看需不需要更新，如果要更新就继续调用对应的component类对应的receiveComponent就好啦，其实就是直接当甩手掌柜，事情直接丢给手下去办了。当然还有种情况是，两次生成的element差别太大，就不是一个类型的，那就直接重新生成一份新的代码重新渲染一次。</p>\n<ul>\n<li>自定义元素的更新，主要是更新render出的节点，做甩手掌柜交给render出的节点的对应component去管理更新。</li>\n<li>text节点的更新很简单，直接更新文案。</li>\n<li>浏览器基本元素的更新，分为两块：1.先是更新属性，对比出前后属性的不同，局部更新。并且处理特殊属性，比如事件绑定。2.更新子节点，子节点更新主要是找出差异对象，找差异对象的时候使用_shouldUpdateReactComponent来判断，如果是可以直接更新的就会递归调用子节点的更新，这样也会递归查找差异对象。</li>\n</ul>\n<h4 id=\"更新属性\"><a href=\"#更新属性\" class=\"headerlink\" title=\"更新属性\"></a>更新属性</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOMComponent.prototype._updateDOMProperties = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">lastProps, nextProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> propKey;</span><br><span class=\"line\">    <span class=\"comment\">//遍历，当一个老的属性不在新的属性集合里时，需要删除掉。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (propKey <span class=\"keyword\">in</span> lastProps) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新的属性里有，或者propKey是在原型上的直接跳过。这样剩下的都是不在新属性集合里的。需要删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对于那种特殊的，比如这里的事件监听的属性我们需要去掉监听</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^on[A-Za-z]/</span>.test(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> eventType = propKey.replace(<span class=\"string\">'on'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            <span class=\"comment\">//针对当前的节点取消事件代理</span></span><br><span class=\"line\">            $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>, eventType, lastProps[propKey]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从dom上删除不需要的属性</span></span><br><span class=\"line\">        $(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>).removeAttr(propKey)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对于新的属性，需要写到dom节点上</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (propKey <span class=\"keyword\">in</span> nextProps) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对于事件监听的属性我们需要特殊处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^on[A-Za-z]/</span>.test(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> eventType = propKey.replace(<span class=\"string\">'on'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            <span class=\"comment\">//以前如果已经有，说明有了监听，需要先去掉</span></span><br><span class=\"line\">            lastProps[propKey] &amp;&amp; $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>, eventType, lastProps[propKey]);</span><br><span class=\"line\">            <span class=\"comment\">//针对当前的节点添加事件代理,以_rootNodeID为命名空间</span></span><br><span class=\"line\">            $(<span class=\"built_in\">document</span>).delegate(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>, eventType + <span class=\"string\">'.'</span> + <span class=\"keyword\">this</span>._rootNodeID, nextProps[propKey]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propKey == <span class=\"string\">'children'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加新的属性，或者是更新老的同名属性</span></span><br><span class=\"line\">        $(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>).prop(propKey, nextProps[propKey])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`                </span></span><br><span class=\"line\"><span class=\"string\">#### 更新子节点</span></span><br><span class=\"line\"><span class=\"string\">更新子节点包含两个部分，一个是递归的分析差异，把差异添加到队列中。然后在合适的时机调用_patch把差异应用到dom上</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">ReactDOMComponent.prototype.receiveComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextElement</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastProps = <span class=\"keyword\">this</span>._currentElement.props;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextProps = nextElement.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = nextElement;</span><br><span class=\"line\">    <span class=\"comment\">//需要单独的更新属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateDOMProperties(lastProps,nextProps);</span><br><span class=\"line\">    <span class=\"comment\">//再更新子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateDOMChildren(nextProps.children);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局的更新深度标识</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> updateDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//全局的更新队列，所有的差异都存在这里</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> diffQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOMComponent.prototype._updateDOMChildren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextChildrenElements</span>)</span>&#123;</span><br><span class=\"line\">    updateDepth++</span><br><span class=\"line\">    <span class=\"comment\">//_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._diff(diffQueue,nextChildrenElements);</span><br><span class=\"line\">    updateDepth--</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(updateDepth == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在需要的时候调用patch，执行具体的dom操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._patch(diffQueue);</span><br><span class=\"line\">        diffQueue = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。</li>\n<li>_patch主要就是挨个遍历差异队列，遍历两次，第一次删除掉所有需要变动的节点，然后第二次插入新的节点还有修改的节点。这里为什么可以直接挨个的插入呢？原因就是我们在diff阶段添加差异节点到差异队列时，本身就是有序的，也就是说对于新增节点（包括move和insert的）在队列里的顺序就是最终dom的顺序，所以我们才可以挨个的直接根据index去塞入节点。</li>\n</ul>\n<h4 id=\"diff实现\"><a href=\"#diff实现\" class=\"headerlink\" title=\"_diff实现\"></a>_diff实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//差异更新的几种类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> UPATE_TYPES = &#123;</span><br><span class=\"line\">    MOVE_EXISTING: <span class=\"number\">1</span>,</span><br><span class=\"line\">    REMOVE_NODE: <span class=\"number\">2</span>,</span><br><span class=\"line\">    INSERT_MARKUP: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通的children是一个数组，此方法把它转换成一个map,key就是element的key,如果是text节点或者element创建时并没有传入key,就直接用在数组里的index标识</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenChildren</span>(<span class=\"params\">componentChildren</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> childrenMap = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; componentChildren.length; i++) &#123;</span><br><span class=\"line\">        child = componentChildren[i];</span><br><span class=\"line\">        name = child &amp;&amp; child._currentelement &amp;&amp; child._currentelement.key ? child._currentelement.key : i.toString(<span class=\"number\">36</span>);</span><br><span class=\"line\">        childrenMap[name] = child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> childrenMap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主要用来生成子节点elements的component集合</span></span><br><span class=\"line\"><span class=\"comment\">//这边注意，有个判断逻辑，如果发现是更新，就会继续使用以前的componentInstance,调用对应的receiveComponent。</span></span><br><span class=\"line\"><span class=\"comment\">//如果是新的节点，就会重新生成一个新的componentInstance，</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateComponentChildren</span>(<span class=\"params\">prevChildren, nextChildrenElements</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextChildren = &#123;&#125;;</span><br><span class=\"line\">    nextChildrenElements = nextChildrenElements || [];</span><br><span class=\"line\">    $.each(nextChildrenElements, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, element</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = element.key ? element.key : index;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prevChild = prevChildren &amp;&amp; prevChildren[name];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prevElement = prevChild &amp;&amp; prevChild._currentElement;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextElement = element;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用_shouldUpdateReactComponent判断是否是更新</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_shouldUpdateReactComponent(prevElement, nextElement)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//更新的话直接递归调用子节点的receiveComponent就好了</span></span><br><span class=\"line\">            prevChild.receiveComponent(nextElement);</span><br><span class=\"line\">            <span class=\"comment\">//然后继续使用老的component</span></span><br><span class=\"line\">            nextChildren[name] = prevChild;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//对于没有老的，那就重新新增一个，重新生成一个component</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> nextChildInstance = instantiateReactComponent(nextElement, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//使用新的component</span></span><br><span class=\"line\">            nextChildren[name] = nextChildInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextChildren;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。</span></span><br><span class=\"line\">ReactDOMComponent.prototype._diff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">diffQueue, nextChildrenElements</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">//拿到之前的子节点的 component类型对象的集合,这个是在刚开始渲染时赋值的</span></span><br><span class=\"line\">  <span class=\"comment\">//_renderedChildren 本来是数组，我们搞成map</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevChildren = flattenChildren(self._renderedChildren);</span><br><span class=\"line\">  <span class=\"comment\">//生成新的子节点的component对象集合，这里注意，会复用老的component对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextChildren = generateComponentChildren(prevChildren, nextChildrenElements);</span><br><span class=\"line\">  <span class=\"comment\">//重新赋值_renderedChildren，使用最新的。</span></span><br><span class=\"line\">  self._renderedChildren = []</span><br><span class=\"line\">  $.each(nextChildren, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, instance</span>) </span>&#123;</span><br><span class=\"line\">    self._renderedChildren.push(instance);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>; <span class=\"comment\">//代表到达的新的节点的index</span></span><br><span class=\"line\">  <span class=\"comment\">//通过对比两个集合的差异，组装差异节点添加到队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> nextChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nextChildren.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevChild = prevChildren &amp;&amp; prevChildren[name];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextChild = nextChildren[name];</span><br><span class=\"line\">    <span class=\"comment\">//相同的话，说明是使用的同一个component,所以我们需要做移动的操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChild === nextChild) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//添加差异对象，类型：MOVE_EXISTING</span></span><br><span class=\"line\">      diffQueue.push(&#123;</span><br><span class=\"line\">        parentId: self._rootNodeID,</span><br><span class=\"line\">        parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">        type: UPATE_TYPES.MOVE_EXISTING,</span><br><span class=\"line\">        fromIndex: prevChild._mountIndex,</span><br><span class=\"line\">        toIndex: nextIndex</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果不相同，说明是新增加的节点</span></span><br><span class=\"line\">      <span class=\"comment\">//但是如果老的还存在，就是element不同，但是component一样。我们需要把它对应的老的element删除。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevChild) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加差异对象，类型：REMOVE_NODE</span></span><br><span class=\"line\">        diffQueue.push(&#123;</span><br><span class=\"line\">          parentId: self._rootNodeID,</span><br><span class=\"line\">          parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">          type: UPATE_TYPES.REMOVE_NODE,</span><br><span class=\"line\">          fromIndex: prevChild._mountIndex,</span><br><span class=\"line\">          toIndex: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果以前已经渲染过了，记得先去掉以前所有的事件监听，通过命名空间全部清空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prevChild._rootNodeID) &#123;</span><br><span class=\"line\">            $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'.'</span> + prevChild._rootNodeID);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//新增加的节点，也组装差异对象放到队列里</span></span><br><span class=\"line\">      <span class=\"comment\">//添加差异对象，类型：INSERT_MARKUP</span></span><br><span class=\"line\">      diffQueue.push(&#123;</span><br><span class=\"line\">        parentId: self._rootNodeID,</span><br><span class=\"line\">        parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">        type: UPATE_TYPES.INSERT_MARKUP,</span><br><span class=\"line\">        fromIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        toIndex: nextIndex,</span><br><span class=\"line\">        markup: nextChild.mountComponent() <span class=\"comment\">//新增的节点，多一个此属性，表示新节点的dom内容</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//更新mount的index</span></span><br><span class=\"line\">    nextChild._mountIndex = nextIndex;</span><br><span class=\"line\">    nextIndex++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//对于老的节点里有，新的节点里没有的那些，也全都删除掉</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> prevChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChildren.hasOwnProperty(name) &amp;&amp; !(nextChildren &amp;&amp; nextChildren.hasOwnProperty(name))) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//添加差异对象，类型：REMOVE_NODE</span></span><br><span class=\"line\">      diffQueue.push(&#123;</span><br><span class=\"line\">        parentId: self._rootNodeID,</span><br><span class=\"line\">        parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">        type: UPATE_TYPES.REMOVE_NODE,</span><br><span class=\"line\">        fromIndex: prevChild._mountIndex,</span><br><span class=\"line\">        toIndex: <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">//如果以前已经渲染过了，记得先去掉以前所有的事件监听</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevChildren[name]._rootNodeID) &#123;</span><br><span class=\"line\">        $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'.'</span> + prevChildren[name]._rootNodeID);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"patch的实现\"><a href=\"#patch的实现\" class=\"headerlink\" title=\"__patch的实现\"></a>__patch的实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于将childNode插入到指定位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertChildAt</span>(<span class=\"params\">parentNode, childNode, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beforeChild = parentNode.children().get(index);</span><br><span class=\"line\">    beforeChild ? childNode.insertBefore(beforeChild) : childNode.appendTo(parentNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOMComponent.prototype._patch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">updates</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> update;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> initialChildren = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deleteChildren = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; updates.length; i++) &#123;</span><br><span class=\"line\">        update = updates[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (update.type === UPATE_TYPES.MOVE_EXISTING || update.type === UPATE_TYPES.REMOVE_NODE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> updatedIndex = update.fromIndex;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> updatedChild = $(update.parentNode.children().get(updatedIndex));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parentID = update.parentID;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//所有需要更新的节点都保存下来，方便后面使用</span></span><br><span class=\"line\">            initialChildren[parentID] = initialChildren[parentID] || [];</span><br><span class=\"line\">            <span class=\"comment\">//使用parentID作为简易命名空间</span></span><br><span class=\"line\">            initialChildren[parentID][updatedIndex] = updatedChild;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//所有需要修改的节点先删除,对于move的，后面再重新插入到正确的位置即可</span></span><br><span class=\"line\">            deleteChildren.push(updatedChild)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除所有需要先删除的</span></span><br><span class=\"line\">    $.each(deleteChildren, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, child</span>) </span>&#123;</span><br><span class=\"line\">        $(child).remove();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//再遍历一次，这次处理新增的节点，还有修改的节点这里也要重新插入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; updates.length; k++) &#123;</span><br><span class=\"line\">        update = updates[k];</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (update.type) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UPATE_TYPES.INSERT_MARKUP:</span><br><span class=\"line\">                insertChildAt(update.parentNode, $(update.markup), update.toIndex);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UPATE_TYPES.MOVE_EXISTING:</span><br><span class=\"line\">                insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UPATE_TYPES.REMOVE_NODE:</span><br><span class=\"line\">                <span class=\"comment\">// 什么都不需要做，因为上面已经帮忙删除掉了</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"差异更新类型\"><a href=\"#差异更新类型\" class=\"headerlink\" title=\"差异更新类型\"></a>差异更新类型</h4><ul>\n<li>MOVE_EXISTING: 新的component类型在老的集合里也有，并且element是可以更新的类型，在generateComponentChildren我们已经调用了receiveComponent，这种情况下prevChild=nextChild,那我们就需要做出移动的操作，可以复用以前的dom节点。</li>\n<li>INSERT_MARKUP: 新的component类型不在老的集合里，那么就是全新的节点，我们需要插入新的节点</li>\n<li>REMOVE_NODE: 老的component类型，在新的集合里也有，但是对应的element不同了不能直接复用直接更新，那我们也得删除。</li>\n<li>REMOVE_NODE: 老的component不在新的集合里的，我们需要删除。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、React简介\"><a href=\"#一、React简介\" class=\"headerlink\" title=\"一、React简介\"></a>一、React简介</h2><h3 id=\"1、Virtual-DOM\"><a href=\"#1、Virtual-DOM\" class=\"headerlink\" title=\"1、Virtual DOM\"></a>1、Virtual DOM</h3><p>React为此引入了虚拟DOM的机制，在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。</p>\n<h3 id=\"2、组件化\"><a href=\"#2、组件化\" class=\"headerlink\" title=\"2、组件化\"></a>2、组件化</h3><p>组件是封装起来的具有独立功能的UI部件<br><img src=\"/images/react-component.png\"></p>\n<h4 id=\"React组件应具有如下特征\"><a href=\"#React组件应具有如下特征\" class=\"headerlink\" title=\"React组件应具有如下特征\"></a>React组件应具有如下特征</h4><ul>\n<li>可组合(Composeable): 一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部;如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件</li>\n<li>可重用(Reusable): 每个组件都是具有独立功能的，它可以被使用在多个UI场景</li>\n<li>可维护(Maintainable): 每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>\n<h2 id=\"二、React原理分析\"><a href=\"#二、React原理分析\" class=\"headerlink\" title=\"二、React原理分析\"></a>二、React原理分析</h2><h4 id=\"ReactJs的核心内容主要包括\"><a href=\"#ReactJs的核心内容主要包括\" class=\"headerlink\" title=\"ReactJs的核心内容主要包括\"></a>ReactJs的核心内容主要包括</h4><ul>\n<li>虚拟dom对象(Virtual DOM)</li>\n<li>虚拟dom差异化算法（diff algorithm）</li>\n<li>单向数据流渲染（Data Flow）</li>\n<li>组件生命周期</li>\n<li>事件处理</li>\n</ul>\n<h3 id=\"1、ReactJs首次渲染\"><a href=\"#1、ReactJs首次渲染\" class=\"headerlink\" title=\"1、ReactJs首次渲染\"></a>1、ReactJs首次渲染</h3><p><img src=\"/images/react-first-render.png\"></p>\n<p>虚拟dom元素分为两种，一种是浏览器自带的基本元素比如 div p input form 这种，一种是自定义的元素。<br>文本节点，不算虚拟dom，但是ReacJs为了保持渲染的一致性, 在文本节点外面包了一层span标记，形成简化版的component（ReactDOMTextComponent）。</p>\n<h4 id=\"文本节点渲染\"><a href=\"#文本节点渲染\" class=\"headerlink\" title=\"文本节点渲染\"></a>文本节点渲染</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//component类，用来表示文本在渲染，更新，删除时应该做些什么事情</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReactDOMTextComponent</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存下当前的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = <span class=\"string\">''</span> + text;</span><br><span class=\"line\">    <span class=\"comment\">//用来标识当前component</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//component渲染时生成的dom结构</span></span><br><span class=\"line\">ReactDOMTextComponent.prototype.mountComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rootID</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = rootID;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span data-reactid=\"'</span> + rootID + <span class=\"string\">'\"&gt;'</span> + <span class=\"keyword\">this</span>._currentElement + <span class=\"string\">'&lt;/span&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//component工厂  用来返回一个component实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">instantiateReactComponent</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> node === <span class=\"string\">'string'</span> || <span class=\"keyword\">typeof</span> node === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReactDOMTextComponent(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">React = &#123;</span><br><span class=\"line\">    nextReactRootIndex:<span class=\"number\">0</span>,</span><br><span class=\"line\">    render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element,container</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> componentInstance = instantiateReactComponent(element);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> markup = componentInstance.mountComponent(React.nextReactRootIndex++);</span><br><span class=\"line\">        $(container).html(markup);</span><br><span class=\"line\">        <span class=\"comment\">//触发完成mount的事件</span></span><br><span class=\"line\">        $(<span class=\"built_in\">document</span>).trigger(<span class=\"string\">'mountReady'</span>);    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>React.render 作为入口负责调用渲染</li>\n<li>ReactDOMTextComponent是一个component类定义，定义对于这种文本类型的节点，在渲染，更新，删除时应该做什么操作</li>\n<li>instantiateReactComponent用来根据element的类型（现在只有一种string类型），返回一个component的实例。其实就是个类工厂</li>\n</ul>\n<h4 id=\"基本元素渲染\"><a href=\"#基本元素渲染\" class=\"headerlink\" title=\"基本元素渲染\"></a>基本元素渲染</h4><p>在React中使用React.createElement来创建一个虚拟dom元素, 例如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> element = React.createElement(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">id</span>:<span class=\"string\">'test'</span>,<span class=\"attr\">onclick</span>:hello&#125;,<span class=\"string\">'click me'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">React.render(element,<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>当render的不是文本而是浏览器的基本元素时，使用另外一种component来处理它渲染时应该返回的内容，由于使用的是工厂方法instantiateReactComponent，不管来了什么类型的node，都可以负责生产出一个负责渲染的component实例。这样render完全不需要做任何修改，只需要再做一种对应的component类型ReactDOMComponent就行了。<br>虚拟dom的渲染逻辑，本质上还是个递归渲染的东西，reactElement会递归渲染自己的子节点。可以看到我们通过instantiateReactComponent屏蔽了子节点的差异，只需要使用不同的componet类，这样都能保证通过mountComponent最终拿到渲染后的内容。</p>\n<h4 id=\"自定义元素渲染\"><a href=\"#自定义元素渲染\" class=\"headerlink\" title=\"自定义元素渲染\"></a>自定义元素渲染</h4><p>随着前端技术的发展浏览器的那些基本元素已经满足不了我们的需求了，ReactJs的element.type可以是简单的字符串也可以是个类，而且这个类还有自己的生命周期管理。</p>\n<blockquote>\n<p>生命周期共提供了10个不同的API<br>1.getDefaultProps<br>2.getInitialState<br>3.componentWillMount<br>4.render<br>5.componentDidMount<br>6.componentWillReceiveProps<br>7.shouldComponentUpdate<br>8.componentWillUpdate<br>9.componentDidUpdate<br>10.componentWillUnmount</p>\n</blockquote>\n<p>自定义元素,React.createElement接受的不再是字符串，而是一个class<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">'say:'</span>&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentWillMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我就要开始渲染了。。。'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我已经渲染好了。。。'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> React.createElement(<span class=\"string\">\"div\"</span>, <span class=\"literal\">null</span>,<span class=\"keyword\">this</span>.state.type, <span class=\"string\">\"Hello \"</span>, <span class=\"keyword\">this</span>.props.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">React.render(React.createElement(HelloMessage, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"John\"</span>&#125;), <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>));</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>React.createClass生成一个自定义标记类，带有基本的生命周期：</li>\n<li>getInitialState 获取最初的属性值this.state</li>\n<li>componentWillmount 在组件准备渲染时调用</li>\n<li>componentDidMount 在组件渲染完成后调用</li>\n</ul>\n<p>通过上面的两种类型知道，需要未自定义元素也提供一个componet类，在这个类里我们会实例化ReactClass，并且管理生命周期，还有父子组件依赖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReactCompositeComponent</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放元素element对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = element;</span><br><span class=\"line\">    <span class=\"comment\">//存放唯一标识</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//存放对应的ReactClass的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于返回当前自定义元素渲染时应该返回的内容</span></span><br><span class=\"line\">ReactCompositeComponent.prototype.mountComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rootID</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rootNodeID = rootID;</span><br><span class=\"line\">    <span class=\"comment\">//拿到当前元素对应的属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> publicProps = <span class=\"keyword\">this</span>._currentElement.props;</span><br><span class=\"line\">    <span class=\"comment\">//拿到对应的ReactClass</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ReactClass = <span class=\"keyword\">this</span>._currentElement.type;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize the public class</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inst = <span class=\"keyword\">new</span> ReactClass(publicProps);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._instance = inst;</span><br><span class=\"line\">    <span class=\"comment\">//保留对当前comonent的引用，下面更新会用到</span></span><br><span class=\"line\">    inst._reactInternalInstance = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inst.componentWillMount) &#123;</span><br><span class=\"line\">        inst.componentWillMount();</span><br><span class=\"line\">        <span class=\"comment\">//这里在原始的reactjs其实还有一层处理，就是  componentWillMount调用setstate，不会触发rerender而是自动提前合并，这里为了保持简单，就略去了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用ReactClass的实例的render方法,返回一个element或者一个文本节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderedElement = <span class=\"keyword\">this</span>._instance.render();</span><br><span class=\"line\">    <span class=\"comment\">//得到renderedElement对应的component类实例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderedComponentInstance = instantiateReactComponent(renderedElement);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._renderedComponent = renderedComponentInstance; <span class=\"comment\">//存起来留作后用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//拿到渲染之后的字符串内容，将当前的_rootNodeID传给render出的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderedMarkup = renderedComponentInstance.mountComponent(<span class=\"keyword\">this</span>._rootNodeID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//之前我们在React.render方法最后触发了mountReady事件，所以这里可以监听，在渲染完成后会触发。</span></span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mountReady'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用inst.componentDidMount</span></span><br><span class=\"line\">        inst.componentDidMount &amp;&amp; inst.componentDidMount();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> renderedMarkup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、更新机制\"><a href=\"#2、更新机制\" class=\"headerlink\" title=\"2、更新机制\"></a>2、更新机制</h3><p>一般在reactjs中我们需要更新时都是调用的setState<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//setState</span></span><br><span class=\"line\">ReactClass.prototype.setState = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newState</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还记得我们在ReactCompositeComponent里面mount的时候 做了赋值</span></span><br><span class=\"line\">    <span class=\"comment\">//所以这里可以拿到 对应的ReactCompositeComponent的实例_reactInternalInstance</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._reactInternalInstance.receiveComponent(<span class=\"literal\">null</span>, newState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>setState主要调用了对应的component的receiveComponent来实现更新。所有的挂载，更新都应该交给对应的component来管理</li>\n<li>就像所有的component都实现了mountComponent来处理第一次渲染，所有的componet类都应该实现receiveComponent用来处理自己的更新</li>\n</ul>\n<h4 id=\"自定义元素的receiveComponent\"><a href=\"#自定义元素的receiveComponent\" class=\"headerlink\" title=\"自定义元素的receiveComponent\"></a>自定义元素的receiveComponent</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新</span></span><br><span class=\"line\">ReactCompositeComponent.prototype.receiveComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextElement, newState</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果接受了新的，就使用最新的element</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = nextElement || <span class=\"keyword\">this</span>._currentElement</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inst = <span class=\"keyword\">this</span>._instance;</span><br><span class=\"line\">    <span class=\"comment\">//合并state</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextState = $.extend(inst.state, newState);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextProps = <span class=\"keyword\">this</span>._currentElement.props;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//改写state</span></span><br><span class=\"line\">    inst.state = nextState;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果inst有shouldComponentUpdate并且返回false。说明组件本身判断不要更新，就直接返回。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inst.shouldComponentUpdate &amp;&amp; (inst.shouldComponentUpdate(nextProps, nextState) === <span class=\"literal\">false</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生命周期管理，如果有componentWillUpdate，就调用，表示开始要更新了。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inst.componentWillUpdate) inst.componentWillUpdate(nextProps, nextState);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevComponentInstance = <span class=\"keyword\">this</span>._renderedComponent;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevRenderedElement = prevComponentInstance._currentElement;</span><br><span class=\"line\">    <span class=\"comment\">//重新执行render拿到对应的新element;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextRenderedElement = <span class=\"keyword\">this</span>._instance.render();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是需要更新还是直接就重新渲染</span></span><br><span class=\"line\">    <span class=\"comment\">//注意这里的_shouldUpdateReactComponent跟上面的不同哦 这个是全局的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果需要更新，就继续调用子节点的receiveComponent的方法，传入新的element更新子节点。</span></span><br><span class=\"line\">        prevComponentInstance.receiveComponent(nextRenderedElement);</span><br><span class=\"line\">        <span class=\"comment\">//调用componentDidUpdate表示更新完成了</span></span><br><span class=\"line\">        inst.componentDidUpdate &amp;&amp; inst.componentDidUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果发现完全是不同的两种element，那就干脆重新渲染了</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> thisID = <span class=\"keyword\">this</span>._rootNodeID;</span><br><span class=\"line\">        <span class=\"comment\">//重新new一个对应的component，</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._renderedComponent = <span class=\"keyword\">this</span>._instantiateReactComponent(nextRenderedElement);</span><br><span class=\"line\">        <span class=\"comment\">//重新生成对应的元素内容</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextMarkup = _renderedComponent.mountComponent(thisID);</span><br><span class=\"line\">        <span class=\"comment\">//替换整个节点</span></span><br><span class=\"line\">        $(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>).replaceWith(nextMarkup);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用来判定两个element需不需要更新</span></span><br><span class=\"line\"><span class=\"comment\">//这里的key是我们createElement的时候可以选择性的传入的。用来标识这个element，当发现key不同时，我们就可以直接重新渲染，不需要去更新了。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _shouldUpdateReactComponent ＝ <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prevElement, nextElement</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevElement != <span class=\"literal\">null</span> &amp;&amp; nextElement != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevType = <span class=\"keyword\">typeof</span> prevElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextType = <span class=\"keyword\">typeof</span> nextElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevType === <span class=\"string\">'string'</span> || prevType === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextType === <span class=\"string\">'string'</span> || nextType === <span class=\"string\">'number'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextType === <span class=\"string\">'object'</span> &amp;&amp; prevElement.type === nextElement.type &amp;&amp; prevElement.key === nextElement.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>inst.shouldComponentUpdate是实例方法，当我们不希望某次setState后更新，我们就可以重写这个方法，返回false就好了。</li>\n<li>_shouldUpdateReactComponent是一个全局方法，这个是一种reactjs的优化机制。用来决定是直接全部替换，还是使用很细微的改动。当两次render出来的子节点key不同，直接全部重新渲染一遍，替换就好了。否则，我们就得来个递归的更新，保证最小化的更新机制，这样可以不会有太大的闪烁。</li>\n</ul>\n<p>首先合并改动，生成最新的state,props然后拿以前的render返回的element跟现在最新调用render生成的element进行对比（_shouldUpdateReactComponent），看看需不需要更新，如果要更新就继续调用对应的component类对应的receiveComponent就好啦，其实就是直接当甩手掌柜，事情直接丢给手下去办了。当然还有种情况是，两次生成的element差别太大，就不是一个类型的，那就直接重新生成一份新的代码重新渲染一次。</p>\n<ul>\n<li>自定义元素的更新，主要是更新render出的节点，做甩手掌柜交给render出的节点的对应component去管理更新。</li>\n<li>text节点的更新很简单，直接更新文案。</li>\n<li>浏览器基本元素的更新，分为两块：1.先是更新属性，对比出前后属性的不同，局部更新。并且处理特殊属性，比如事件绑定。2.更新子节点，子节点更新主要是找出差异对象，找差异对象的时候使用_shouldUpdateReactComponent来判断，如果是可以直接更新的就会递归调用子节点的更新，这样也会递归查找差异对象。</li>\n</ul>\n<h4 id=\"更新属性\"><a href=\"#更新属性\" class=\"headerlink\" title=\"更新属性\"></a>更新属性</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOMComponent.prototype._updateDOMProperties = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">lastProps, nextProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> propKey;</span><br><span class=\"line\">    <span class=\"comment\">//遍历，当一个老的属性不在新的属性集合里时，需要删除掉。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (propKey <span class=\"keyword\">in</span> lastProps) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新的属性里有，或者propKey是在原型上的直接跳过。这样剩下的都是不在新属性集合里的。需要删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对于那种特殊的，比如这里的事件监听的属性我们需要去掉监听</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^on[A-Za-z]/</span>.test(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> eventType = propKey.replace(<span class=\"string\">'on'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            <span class=\"comment\">//针对当前的节点取消事件代理</span></span><br><span class=\"line\">            $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>, eventType, lastProps[propKey]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从dom上删除不需要的属性</span></span><br><span class=\"line\">        $(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>).removeAttr(propKey)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对于新的属性，需要写到dom节点上</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (propKey <span class=\"keyword\">in</span> nextProps) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对于事件监听的属性我们需要特殊处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^on[A-Za-z]/</span>.test(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> eventType = propKey.replace(<span class=\"string\">'on'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            <span class=\"comment\">//以前如果已经有，说明有了监听，需要先去掉</span></span><br><span class=\"line\">            lastProps[propKey] &amp;&amp; $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>, eventType, lastProps[propKey]);</span><br><span class=\"line\">            <span class=\"comment\">//针对当前的节点添加事件代理,以_rootNodeID为命名空间</span></span><br><span class=\"line\">            $(<span class=\"built_in\">document</span>).delegate(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>, eventType + <span class=\"string\">'.'</span> + <span class=\"keyword\">this</span>._rootNodeID, nextProps[propKey]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propKey == <span class=\"string\">'children'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加新的属性，或者是更新老的同名属性</span></span><br><span class=\"line\">        $(<span class=\"string\">'[data-reactid=\"'</span> + <span class=\"keyword\">this</span>._rootNodeID + <span class=\"string\">'\"]'</span>).prop(propKey, nextProps[propKey])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`                </span></span><br><span class=\"line\"><span class=\"string\">#### 更新子节点</span></span><br><span class=\"line\"><span class=\"string\">更新子节点包含两个部分，一个是递归的分析差异，把差异添加到队列中。然后在合适的时机调用_patch把差异应用到dom上</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">ReactDOMComponent.prototype.receiveComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextElement</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastProps = <span class=\"keyword\">this</span>._currentElement.props;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextProps = nextElement.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._currentElement = nextElement;</span><br><span class=\"line\">    <span class=\"comment\">//需要单独的更新属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateDOMProperties(lastProps,nextProps);</span><br><span class=\"line\">    <span class=\"comment\">//再更新子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateDOMChildren(nextProps.children);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局的更新深度标识</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> updateDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//全局的更新队列，所有的差异都存在这里</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> diffQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOMComponent.prototype._updateDOMChildren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextChildrenElements</span>)</span>&#123;</span><br><span class=\"line\">    updateDepth++</span><br><span class=\"line\">    <span class=\"comment\">//_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._diff(diffQueue,nextChildrenElements);</span><br><span class=\"line\">    updateDepth--</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(updateDepth == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在需要的时候调用patch，执行具体的dom操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._patch(diffQueue);</span><br><span class=\"line\">        diffQueue = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。</li>\n<li>_patch主要就是挨个遍历差异队列，遍历两次，第一次删除掉所有需要变动的节点，然后第二次插入新的节点还有修改的节点。这里为什么可以直接挨个的插入呢？原因就是我们在diff阶段添加差异节点到差异队列时，本身就是有序的，也就是说对于新增节点（包括move和insert的）在队列里的顺序就是最终dom的顺序，所以我们才可以挨个的直接根据index去塞入节点。</li>\n</ul>\n<h4 id=\"diff实现\"><a href=\"#diff实现\" class=\"headerlink\" title=\"_diff实现\"></a>_diff实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//差异更新的几种类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> UPATE_TYPES = &#123;</span><br><span class=\"line\">    MOVE_EXISTING: <span class=\"number\">1</span>,</span><br><span class=\"line\">    REMOVE_NODE: <span class=\"number\">2</span>,</span><br><span class=\"line\">    INSERT_MARKUP: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通的children是一个数组，此方法把它转换成一个map,key就是element的key,如果是text节点或者element创建时并没有传入key,就直接用在数组里的index标识</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenChildren</span>(<span class=\"params\">componentChildren</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> childrenMap = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; componentChildren.length; i++) &#123;</span><br><span class=\"line\">        child = componentChildren[i];</span><br><span class=\"line\">        name = child &amp;&amp; child._currentelement &amp;&amp; child._currentelement.key ? child._currentelement.key : i.toString(<span class=\"number\">36</span>);</span><br><span class=\"line\">        childrenMap[name] = child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> childrenMap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主要用来生成子节点elements的component集合</span></span><br><span class=\"line\"><span class=\"comment\">//这边注意，有个判断逻辑，如果发现是更新，就会继续使用以前的componentInstance,调用对应的receiveComponent。</span></span><br><span class=\"line\"><span class=\"comment\">//如果是新的节点，就会重新生成一个新的componentInstance，</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateComponentChildren</span>(<span class=\"params\">prevChildren, nextChildrenElements</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextChildren = &#123;&#125;;</span><br><span class=\"line\">    nextChildrenElements = nextChildrenElements || [];</span><br><span class=\"line\">    $.each(nextChildrenElements, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, element</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = element.key ? element.key : index;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prevChild = prevChildren &amp;&amp; prevChildren[name];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prevElement = prevChild &amp;&amp; prevChild._currentElement;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextElement = element;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用_shouldUpdateReactComponent判断是否是更新</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_shouldUpdateReactComponent(prevElement, nextElement)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//更新的话直接递归调用子节点的receiveComponent就好了</span></span><br><span class=\"line\">            prevChild.receiveComponent(nextElement);</span><br><span class=\"line\">            <span class=\"comment\">//然后继续使用老的component</span></span><br><span class=\"line\">            nextChildren[name] = prevChild;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//对于没有老的，那就重新新增一个，重新生成一个component</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> nextChildInstance = instantiateReactComponent(nextElement, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//使用新的component</span></span><br><span class=\"line\">            nextChildren[name] = nextChildInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextChildren;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//_diff用来递归找出差别,组装差异对象,添加到更新队列diffQueue。</span></span><br><span class=\"line\">ReactDOMComponent.prototype._diff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">diffQueue, nextChildrenElements</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">//拿到之前的子节点的 component类型对象的集合,这个是在刚开始渲染时赋值的</span></span><br><span class=\"line\">  <span class=\"comment\">//_renderedChildren 本来是数组，我们搞成map</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevChildren = flattenChildren(self._renderedChildren);</span><br><span class=\"line\">  <span class=\"comment\">//生成新的子节点的component对象集合，这里注意，会复用老的component对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextChildren = generateComponentChildren(prevChildren, nextChildrenElements);</span><br><span class=\"line\">  <span class=\"comment\">//重新赋值_renderedChildren，使用最新的。</span></span><br><span class=\"line\">  self._renderedChildren = []</span><br><span class=\"line\">  $.each(nextChildren, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, instance</span>) </span>&#123;</span><br><span class=\"line\">    self._renderedChildren.push(instance);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>; <span class=\"comment\">//代表到达的新的节点的index</span></span><br><span class=\"line\">  <span class=\"comment\">//通过对比两个集合的差异，组装差异节点添加到队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> nextChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nextChildren.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevChild = prevChildren &amp;&amp; prevChildren[name];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextChild = nextChildren[name];</span><br><span class=\"line\">    <span class=\"comment\">//相同的话，说明是使用的同一个component,所以我们需要做移动的操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChild === nextChild) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//添加差异对象，类型：MOVE_EXISTING</span></span><br><span class=\"line\">      diffQueue.push(&#123;</span><br><span class=\"line\">        parentId: self._rootNodeID,</span><br><span class=\"line\">        parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">        type: UPATE_TYPES.MOVE_EXISTING,</span><br><span class=\"line\">        fromIndex: prevChild._mountIndex,</span><br><span class=\"line\">        toIndex: nextIndex</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果不相同，说明是新增加的节点</span></span><br><span class=\"line\">      <span class=\"comment\">//但是如果老的还存在，就是element不同，但是component一样。我们需要把它对应的老的element删除。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevChild) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加差异对象，类型：REMOVE_NODE</span></span><br><span class=\"line\">        diffQueue.push(&#123;</span><br><span class=\"line\">          parentId: self._rootNodeID,</span><br><span class=\"line\">          parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">          type: UPATE_TYPES.REMOVE_NODE,</span><br><span class=\"line\">          fromIndex: prevChild._mountIndex,</span><br><span class=\"line\">          toIndex: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果以前已经渲染过了，记得先去掉以前所有的事件监听，通过命名空间全部清空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prevChild._rootNodeID) &#123;</span><br><span class=\"line\">            $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'.'</span> + prevChild._rootNodeID);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//新增加的节点，也组装差异对象放到队列里</span></span><br><span class=\"line\">      <span class=\"comment\">//添加差异对象，类型：INSERT_MARKUP</span></span><br><span class=\"line\">      diffQueue.push(&#123;</span><br><span class=\"line\">        parentId: self._rootNodeID,</span><br><span class=\"line\">        parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">        type: UPATE_TYPES.INSERT_MARKUP,</span><br><span class=\"line\">        fromIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        toIndex: nextIndex,</span><br><span class=\"line\">        markup: nextChild.mountComponent() <span class=\"comment\">//新增的节点，多一个此属性，表示新节点的dom内容</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//更新mount的index</span></span><br><span class=\"line\">    nextChild._mountIndex = nextIndex;</span><br><span class=\"line\">    nextIndex++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//对于老的节点里有，新的节点里没有的那些，也全都删除掉</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> prevChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChildren.hasOwnProperty(name) &amp;&amp; !(nextChildren &amp;&amp; nextChildren.hasOwnProperty(name))) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//添加差异对象，类型：REMOVE_NODE</span></span><br><span class=\"line\">      diffQueue.push(&#123;</span><br><span class=\"line\">        parentId: self._rootNodeID,</span><br><span class=\"line\">        parentNode: $(<span class=\"string\">'[data-reactid='</span> + self._rootNodeID + <span class=\"string\">']'</span>),</span><br><span class=\"line\">        type: UPATE_TYPES.REMOVE_NODE,</span><br><span class=\"line\">        fromIndex: prevChild._mountIndex,</span><br><span class=\"line\">        toIndex: <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">//如果以前已经渲染过了，记得先去掉以前所有的事件监听</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevChildren[name]._rootNodeID) &#123;</span><br><span class=\"line\">        $(<span class=\"built_in\">document</span>).undelegate(<span class=\"string\">'.'</span> + prevChildren[name]._rootNodeID);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"patch的实现\"><a href=\"#patch的实现\" class=\"headerlink\" title=\"__patch的实现\"></a>__patch的实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于将childNode插入到指定位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertChildAt</span>(<span class=\"params\">parentNode, childNode, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beforeChild = parentNode.children().get(index);</span><br><span class=\"line\">    beforeChild ? childNode.insertBefore(beforeChild) : childNode.appendTo(parentNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOMComponent.prototype._patch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">updates</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> update;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> initialChildren = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deleteChildren = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; updates.length; i++) &#123;</span><br><span class=\"line\">        update = updates[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (update.type === UPATE_TYPES.MOVE_EXISTING || update.type === UPATE_TYPES.REMOVE_NODE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> updatedIndex = update.fromIndex;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> updatedChild = $(update.parentNode.children().get(updatedIndex));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parentID = update.parentID;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//所有需要更新的节点都保存下来，方便后面使用</span></span><br><span class=\"line\">            initialChildren[parentID] = initialChildren[parentID] || [];</span><br><span class=\"line\">            <span class=\"comment\">//使用parentID作为简易命名空间</span></span><br><span class=\"line\">            initialChildren[parentID][updatedIndex] = updatedChild;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//所有需要修改的节点先删除,对于move的，后面再重新插入到正确的位置即可</span></span><br><span class=\"line\">            deleteChildren.push(updatedChild)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除所有需要先删除的</span></span><br><span class=\"line\">    $.each(deleteChildren, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, child</span>) </span>&#123;</span><br><span class=\"line\">        $(child).remove();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//再遍历一次，这次处理新增的节点，还有修改的节点这里也要重新插入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; updates.length; k++) &#123;</span><br><span class=\"line\">        update = updates[k];</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (update.type) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UPATE_TYPES.INSERT_MARKUP:</span><br><span class=\"line\">                insertChildAt(update.parentNode, $(update.markup), update.toIndex);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UPATE_TYPES.MOVE_EXISTING:</span><br><span class=\"line\">                insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> UPATE_TYPES.REMOVE_NODE:</span><br><span class=\"line\">                <span class=\"comment\">// 什么都不需要做，因为上面已经帮忙删除掉了</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"差异更新类型\"><a href=\"#差异更新类型\" class=\"headerlink\" title=\"差异更新类型\"></a>差异更新类型</h4><ul>\n<li>MOVE_EXISTING: 新的component类型在老的集合里也有，并且element是可以更新的类型，在generateComponentChildren我们已经调用了receiveComponent，这种情况下prevChild=nextChild,那我们就需要做出移动的操作，可以复用以前的dom节点。</li>\n<li>INSERT_MARKUP: 新的component类型不在老的集合里，那么就是全新的节点，我们需要插入新的节点</li>\n<li>REMOVE_NODE: 老的component类型，在新的集合里也有，但是对应的element不同了不能直接复用直接更新，那我们也得删除。</li>\n<li>REMOVE_NODE: 老的component不在新的集合里的，我们需要删除。</li>\n</ul>\n"},{"title":"Hash规则","date":"2017-12-07T02:43:30.000Z","author":"luoxiao","_content":"# Hash规则\n\n## B端hash问题\n1、原本主文档引用的文件，hash生成交由CI处理，但是资源路径配置错误，导致CI替换失败，异步脚本正常更新，但是主文档中引用的是老的文件。\n\n2、chunk文件内容未修改，引用的module Id有变更，但是hash值未更新，导致新老版本加载报错。\n\n3、为了解决CDN上缓存了错误的文件版本hash的问题，引入了webpack-md5-hash重新生成了文件hash规则。\n\n4、发现webpack-md5-hash插件本身hash策略有问题：module id改变或者异步chunk改变，都不会更新hash值，导致错误的引用。\n\n## 基础概念\n### 1、hash与chunkHash的区别\n文件的hash指纹通常作为前端静态资源实现增量更新的方案之一，在Webpack编译输出文件的配置过程中，如果需要为文件加入hash指纹，Webpack提供了两个配置项可供使用：hash和chunkhash。那么两者有何区别呢？其各自典型的应用场景又是什么？\n\n![](https://lh3.googleusercontent.com/-feuxO7i_WpU/WiisDUxOPBI/AAAAAAAAACc/5ENERNx9V4QDEK41xCp8IR8nojsfU5qWQCHMYCw/I/15120231856243.jpg)\n\n首先我们先看一下官方文档对于两者的定义：\n> [hash] is replaced by the hash of the compilation.\n\n`hash`代表的是compilation的hash值。\n\n> [chunkhash] is replaced by the hash of the chunk.\n\n`chunkhash`代表的是chunk的hash值。\n\nchunkhash很好理解，chunk在Webpack中的含义我们都清楚，简单讲，chunk就是模块。chunkhash也就是根据模块内容计算出的hash值。\n\n那么该如何理解hash是compilation的hash值这句话呢？首先先讲解一下Webpack中compilation的含义。\n\n#### 1.1、compilation\nWebpack官方文档中How to write a plugin章节有对compilation的详解。\n> A compilation object represents a single build of versioned assets. While running Webpack development middleware, a new compilation will be created each time a file change is detected, thus generating a new set of compiled assets. A compilation surfaces information about the present state of module resources, compiled assets, changed files, and watched dependencies.\n\ncompilation对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。compilation对象包含当前模块资源、待编译文件、有改动的文件和监听依赖的所有信息。\n\n与compilation对应的有个compiler对象，通过对比，可以帮助大家对compilation有更深入的理解。\n\n#### 1.2、compiler\n>The compiler object represents the fully configured Webpack environment. This object is built once upon starting Webpack, and is configured with all operational settings including options, loaders, and plugins.\n\ncompiler对象代表的是配置完备的Webpack环境。 compiler对象只在Webpack启动时构建一次，由Webpack组合所有的配置项构建生成。\n\n简单的讲，compiler对象代表的是不变的webpack环境，是针对webpack的；而compilation对象针对的是随时可变的项目文件，只要文件有改动，compilation就会被重新创建。\n\n#### 1.3、使用对比\ncompilation在项目中任何一个文件改动后就会被重新创建，然后webpack计算新的compilation的hash值，这个hash值便是`hash`。\n\n如果使用hash作为编译输出文件的hash指纹的话，如下：\n\n```javascript\noutput: {\n    filename: '[name].[hash:8].js',\n    path: __dirname + '/build'\n}\n```\n\nhash是compilation对象计算所得，而不是具体的项目文件计算所得。所以以上配置的编译输出文件，所有的文件名都会使用相同的hash指纹。如下：\n\n![](https://lh3.googleusercontent.com/-wlJUDhxMPqU/Wh7zMZjuqfI/AAAAAAAAABk/IhEtsJXAHL0bPovXAgeSV4NB7e-UWXjsQCHMYCw/I/15119373145001.jpg)\n这样带来的问题是，三个js文件任何一个改动都会影响另外两个文件的最终文件名。上线后，另外两个文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。\n\n那么如何避免这个问题呢？答案就是chunkhash！\n\n根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：\n\n```javascript\noutput: {\n    filename: '[name].[chunkhash:8].js',\n    path: __dirname + '/build'\n}\n```\n\n编译输出的文件为：\n\n![](https://lh3.googleusercontent.com/-SrxuYiL3LV8/Wh7zM3v49mI/AAAAAAAAABo/empy-1upuAsdOf5JQjUYV0_lfdLKbX5ywCHMYCw/I/15119400009939.jpg)\n每个文件的hash指纹都不相同，上线后无改动的文件不会失去缓存。\n\n>不要在开发环境使用 [chunkhash]/[hash]/[contenthash]，因为不需要在开发环境做持久缓存，而且这样会增加编译时间，开发环境用 [name] 就可以了。\n\n### 2、contenthash\nwebpack将style视为js的一部分，所以在计算chunkhash时，会把所有的js代码和style代码混合在一起计算。比如main.js引用了main.scss:\n\n```\nimport 'main.scss';\nalert('I am main.js');\n```\n\nmain.scss的内容如下：\n\n```\nbody{\n    color: #000;\n}\n```\nwebpack计算chunkhash时，以main.js文件为编译入口，整个chunk的内容会将main.scss的内容也计算在内：\n\n```\nbody{\n    color: #000;\n}\nalert('I am main.js');\n```\n所以，不论是修改了js代码还是scss代码，整个chunk的内容都改变了，计算所得的chunkhash自然就不同了。\n\n我们一般会通过`extract-text-webpack-plugin`将样式文件单独抽取出来，但是不管是不是抽取出来了，chunkhash的计算方式还是合在一起算的， js 和 css 输出的文件用的是同一个 chunkhash，所以还是会存在问题。不过，该插件提供了另外一种hash值：`contenthash`。\n\n顾名思义，contenthash代表的是文本文件内容的hash值，也就是只有style文件的hash值。\n\n```\nnew ExtractTextPlugin('[name].[contenthash].css');\n```\n这样，编译出来的js和css文件将会有独立的hash指纹。并且如果我们只是修改了js代码，css的hash值也不会变化的。\n\n但是，反过来看，当我们如果修改css文件的时候，会发现js的hash还是会变化，还是因为之前提到的，chunkhash会计算js和css为入口，就算css已经提出去了。那么怎么去解决呢？\n\n### 3、入坑webpack-md5-hash\n\nwebpack-md5-hash做了些什么？\n这里提到一个概念叫`chunk-hash`，并不是webpack中另一种hash值，而是compilation执行生命周期中的一个钩子。\n\n```\nthis.applyPlugins(\"chunk-hash\", chunk, chunkHash);\n```\n\nchunk-hash是在`chunhash计算完毕之后执行的`，这就意味着如果我们在chunk-hash钩子中可以用新的chunkhash替换已存在的值。webpack-md5-hash便是如此实现的，用了另外一种计算方式，去生成hash值。\n\n看上去一切都很美好，使用了webpack-md5-hash之后，我们去修改css文件的时候，会发现js的hash没有发生变化。那么webpack-md5-hash到底做了些什么？\n\n#### 3.1 webpack-md5-hash做了什么？\n\n![](https://lh3.googleusercontent.com/-FHhesndXOUY/Wh7zNFCIjrI/AAAAAAAAABs/pfTwbRJhcJIVDxYOxWbRAMZqASq52iVXQCHMYCw/I/15119733897082.jpg)\n\n通过模块路径来排序 chunk 的所有依赖模块（仅这个 chunk 中的模块，不含被 CommonsChunkPlugin 剔除的模块），并将这些排序后的模块源代码拼接，最后用 MD5 拼接后内容的 chunkhash。插件这么做的好处是，使 chunkhash 与该 chunk 内代码做直接关联，让 chunk 与其依赖的模块 ID 无关化，无论模块 ID 如何变化，都不会影响父 chunk 的实质内容及 chunkhash。\n\n#### 3.2 存在的问题？\n* 当仅有modules id发生改变的时候，hash值不会发生变化（https://github.com/erm0l0v/webpack-md5-hash/issues/7 ）\n*  它的计算方法是只计算模块本身的当前内容（包括同步模块），也就是上文的代码。这种计算方式把异步模块的内容忽略掉了。也就是说，`主文件计算hash值时没有把异步模块的内容计算在内`。\n\n ![](https://lh3.googleusercontent.com/-to9DqvWoUYY/Wh7zNoLxVyI/AAAAAAAAABw/P3PZbCWJBegTFfml526mt5eiq7HMMbesACHMYCw/I/15119741407593.jpg)\n\n#### 3.3 异步模块问题如何导致的?\n例如：入口文件main.app.js的代码如下：\n\n```\nimport '../style/main.app.scss';\n\nconsole.log('main');\nwindow.onload = function(){\n    require.ensure([],(require)=>{\n        require('./part.a.js');\n    });\n}\n```\n\n异步模块part.a.js代码如下：\n\n```\nconsole.log('part a');\nsetTimeout(()=>{\n    require.ensure([],(require)=>{\n        require('./part.b.js');\n    });\n},10000);\n```\n\n异步模块part.b.js代码如下：\n\n```\nimport fn_c from './part.c.js';\nimport fn_d from './part.d.js';\n\nconsole.log('part b');\n```\n\n使用webpack将以上源代码进行编译，输出以下文件：\n\n-------\n\n* main.app.[chunkhash].js：主文件；\n* part.a.[chunkhash].js：异步模块a；\n* part.b.[chunkhash].js：异步模块b；\n* main.app.[chunkhash].css：样式文件。\n\n-------\n\n如果我们修改了part.a.js源码，编译的结果文件哪些文件的hash改变了？ 答案是：只有part.a.[chunkhash].js的hash改变了，其余文件的hash都与修改前一致。那么这种结果是否合理呢？\n\n我们首先了解一下webpack runtime是如何加载异步模块的？\n\n```\nvar head = document.getElementsByTagName('head')[0];\nvar script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.charset = 'utf-8';\nscript.async = true;\n\nscript.src = __webpack_require__.p + \"js/part/part.\" + ({\n    \"1\": \"a\",\n    \"2\": \"b\"\n    }[chunkId] || chunkId) + \".\" + {\n    \"1\": \"f5ea7d95\",\n    \"2\": \"b93662b0\"\n}[chunkId] + \".js\";\n\nhead.appendChild(script);\n```\n\n上述代码是编译生成的main.app.[chunkhash].js中实现懒加载的逻辑，原理就是大家熟知的动态生成script标签。但是在对script.src赋值时，webpack有以下三个概念需要知晓：\n\n-------\n\n* chunkId，对应上述代码中的\"1\"和\"2\"；\n* chunkName，对应上述代码中的\"a\"和\"b\"；\n* chunkHash，对应上述代码中的\"f5ea7d95\"和\"b93662b0\"。\n\n-------\n\n\n也就是说，part.a.[chunkhash].js和part.b.[chunkhash].js的hash值是写死在main.app.[chunkhash].js中的。按照之前的编译结果，part.a.[chunkhash].js的hash变了，但是main.app.[chunkhash].js的hash没变，那么用户的浏览器仍然缓存着旧版本的main.app.[chunkhash].js，此时异步加载的part.a.[chunkhash].js仍然是旧版本的文件。这显然是不符合需求的。\n\n因此懒加载模块的改动经编译，去引用的主文件的hash值没有变化，影响了版本发布。\n所以建议在采用这种插件的时候，一定要搞清楚它的原理和做的事情，否则容易入坑。\n\n### 4、不稳定的chunkhash\n计算 chunk MD5 摘要并修改 chunk 资源文件名是不够的，Chunk 的生成还涉及到依赖解析和模块 ID 分配，例如：我们都会在 webpack 里面定义 common chunk 提取公共代码，虽然只修改了 app.js 的代码，但在最终的构建结果中，vendor.js 的 chunkhash 也被修改了，尽管 vendor.js 的内容没有实质变化。这样我们无法提高缓存的利用率。\n\n#### 4.1、编译中会导致缓存失效的因素\n在一个 webpack 编译出的分块 (chunk) 文件中，内容分为如下四部分：\n\n* 包含的模块的源代码\n* webpack 生成的模块 id (module id) (包括包含的模块 id, 以及该模块引用的依赖模块的 id)\n* webpack 用于启动运行的 bootstrap runtime\n* Chunk ID\n\n那块这些情况会导致缓存失效：\n##### 1、源代码的变更\n这个不说了\n\n##### 2、webpack 生成的模块 id变动\n\n```\n(function (modules) { // webpackBootstrap\n    // ...\n})([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n    __webpack_require__(1);\n    module.exports = 'entry_1.js';\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n    __webpack_require__(2);\n    module.exports = 'test_1.js';\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n    module.exports = 'test_2.js';\n/***/ }\n/******/ ])\n```\n\n如上，注释中的 /* 0 */ ... /* 1 */ ... 就是该模块对应的 id。\n默认，模块的 ID 是 webpack 根据依赖的收集顺序递增的正整数，这种 ID 分配方式不太稳定，。假设新增/删除一个模块引用，或者依赖的顺序变一下，计算结果就可能变化，导致一些模块 id 发生变化，最终导致输出 chunk 变化，缓存失效。这一条几乎会导致所有输出的分块内容都发生变化。\n\n`如何解决这个问题？`\n\n我们需要固定id的计算方式，那么一个模块文件的什么信息是固定的？ -----文件路径\n可以使用两个插件来解决这个问题：\n* NamedModulesPlugin\n* HashedModuleIdsPlugin\n他们都已经被添加到了webpack中，可以直接使用：\n\n```\nnew webpack.HashedModuleIdsPlugin()\n```\n前者将递增 ID 替换为模块相对路径，可读性强，不过，构建出来的 chunk 会充满各种路径，使文件增大。后者是前者的进阶模块，它在其基础上对模块路径进行 MD5 摘要。到此module id的生成规则稳定下来。\n\n##### 3、webpack bootstrap runtime 变动\n上面的代码里 /* 0 */ ... /* 1 */ ... 对应的都是模块定义，要让程序运行起来还需要一小段启动代码，这个就是 webpack bootstrap runtime，它长这样：\n\n```\n(function(modules) { // webpackBootstrap\n/******/    // The module cache\n/******/    var installedModules = {};\n\n/******/    // The require function\n/******/    function __webpack_require__(moduleId) {\n\n/******/        // Check if module is in cache\n/******/        if(installedModules[moduleId])\n/******/            return installedModules[moduleId].exports;\n\n/******/        // Create a new module (and put it into the cache)\n/******/        var module = installedModules[moduleId] = {\n/******/            exports: {},\n/******/            id: moduleId,\n/******/            loaded: false\n/******/        };\n\n/******/        // Execute the module function\n/******/        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/        // Flag the module as loaded\n/******/        module.loaded = true;\n\n/******/        // Return the exports of the module\n/******/        return module.exports;\n/******/    }\n\n/******/    // expose the modules object (__webpack_modules__)\n/******/    __webpack_require__.m = modules;\n\n/******/    // expose the module cache\n/******/    __webpack_require__.c = installedModules;\n\n/******/    // __webpack_public_path__\n/******/    __webpack_require__.p = \"/build/\";\n\n/******/    // Load entry module and return exports\n/******/    return __webpack_require__(0);\n/******/ })(/* modules */)\n```\n\n其他的都是配置项，启动程序的代码在这一个函数的最后一行：return __webpack_require__(0);，立即执行 id 为0的模块。\n\n这么看好像每次编译的时候这个 runtime 不会有什么变化，然而实际项目中往往为了缓存利用率以及按需加载引入了多个分块 (chunk)，包括公共分块和按需加载的分块。我们可以看到：\n\n```\n/******/    // This file contains only the entry chunk.\n/******/    // The chunk loading function for additional chunks\n/******/    __webpack_require__.e = function requireEnsure(chunkId, callback) {\n/******/        // \"0\" is the signal for \"already loaded\"\n/******/        if(installedChunks[chunkId] === 0)\n/******/            return callback.call(null, __webpack_require__);\n\n/******/        // an array means \"currently loading\".\n/******/        if(installedChunks[chunkId] !== undefined) {\n/******/            installedChunks[chunkId].push(callback);\n/******/        } else {\n/******/            // start chunk loading\n/******/            installedChunks[chunkId] = [callback];\n/******/            var head = document.getElementsByTagName('head')[0];\n/******/            var script = document.createElement('script');\n/******/            script.type = 'text/javascript';\n/******/            script.charset = 'utf-8';\n/******/            script.async = true;\n\n/******/            script.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({\"0\":\"e_1\",\"1\":\"e_2\"}[chunkId]||chunkId) + \".\" + {\"0\":\"d0c1831ff024c3aeb47a\",\"1\":\"50dc9cf2b5e52bc9e61a\"}[chunkId] + \".js\";\n/******/            head.appendChild(script);\n/******/        }\n/******/    };\n```\n这个时候我们可以看看到，最后会有一个文件名映射表，它包含chunks ID 及其对应 chunkhash 的对象，那么runtime 中的文件名映射就跟着改了，这个分块也就被修改了。\n\n`如何解决这个问题？`\nruntime中变动的就是其中的文件名信息，我们把这总是变动的部分单独拎出来，不要让它影响公共分块或者入口分块。\nCommonsChunkPlugin可以帮我们抽取出来：\n\n> CommonsChunkPlugin 可以用于将模块分离到单独的文件中。然而 CommonsChunkPlugin 有一个较少有人知道的功能是，能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定 entry 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：\n\n```\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: Infinity\n    }),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest'\n    }),\n```\n这样就会生成一个特别小（不足 2kb）的 manifest.js解决了 libs 经常被更新的问题。同时我们可以使用[inline-manifest-webpack-plugin](https://github.com/szrenwei/inline-manifest-webpack-plugin)将 manifest 转为内联在 html 内的 inline script\n\n##### 4、Chunk ID变动\n\n```\nwebpackJsonp([0,1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n    __webpack_require__(1);\n    module.exports = 'entry.js';\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n    module.exports = 'test.js';\n\n/***/ }\n]);\n```\n\n这里函数调用的第一个参数 [0,1] 就对应了这个分块的 id。\n同模块 id 一样, 分块 id 的计算与分块引入顺序有关，官方有提供NamedChunksPlugin插件来根据文件名来稳定你的chunkid。\n\n```\nnew webpack.NamedChunksPlugin()\n```\n\n### 5、总结\n\n```\noutput: {\n    filename: '[name].[chunkhash].js',\n    chunkFilename: '[name].[chunkhash].js'\n},\nplugins: [\n    // 单独提取 webpack runtime manifest\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest'\n    }),\n\n    new HtmlWebpackPlugin({\n      template: 'src/pages/index.ejs',\n      chunks: ['manifest',  'vendor']\n    }),\n\n    //内联manifest\n    new InlineManifestWebpackPlugin(),\n\n    // 用文件路径当 id，固定module id\n    new webpack.HashedModuleIdsPlugin(),\n\n    // 文件名固定chunk id\n    new webpack.NamedChunksPlugin(),\n\n    //css 输出按实际内容计算 hash\n    new ExtractTextWebpackPlugin({filename: '[name].[contenthash].css'}),\n]\n```","source":"_posts/Hash规则.md","raw":"---\ntitle: Hash规则\ndate: 2017-12-7 10:43:30\ntags:\n  -Webpack\n  -ES6\ncategories: React\nauthor: luoxiao\n\n---\n# Hash规则\n\n## B端hash问题\n1、原本主文档引用的文件，hash生成交由CI处理，但是资源路径配置错误，导致CI替换失败，异步脚本正常更新，但是主文档中引用的是老的文件。\n\n2、chunk文件内容未修改，引用的module Id有变更，但是hash值未更新，导致新老版本加载报错。\n\n3、为了解决CDN上缓存了错误的文件版本hash的问题，引入了webpack-md5-hash重新生成了文件hash规则。\n\n4、发现webpack-md5-hash插件本身hash策略有问题：module id改变或者异步chunk改变，都不会更新hash值，导致错误的引用。\n\n## 基础概念\n### 1、hash与chunkHash的区别\n文件的hash指纹通常作为前端静态资源实现增量更新的方案之一，在Webpack编译输出文件的配置过程中，如果需要为文件加入hash指纹，Webpack提供了两个配置项可供使用：hash和chunkhash。那么两者有何区别呢？其各自典型的应用场景又是什么？\n\n![](https://lh3.googleusercontent.com/-feuxO7i_WpU/WiisDUxOPBI/AAAAAAAAACc/5ENERNx9V4QDEK41xCp8IR8nojsfU5qWQCHMYCw/I/15120231856243.jpg)\n\n首先我们先看一下官方文档对于两者的定义：\n> [hash] is replaced by the hash of the compilation.\n\n`hash`代表的是compilation的hash值。\n\n> [chunkhash] is replaced by the hash of the chunk.\n\n`chunkhash`代表的是chunk的hash值。\n\nchunkhash很好理解，chunk在Webpack中的含义我们都清楚，简单讲，chunk就是模块。chunkhash也就是根据模块内容计算出的hash值。\n\n那么该如何理解hash是compilation的hash值这句话呢？首先先讲解一下Webpack中compilation的含义。\n\n#### 1.1、compilation\nWebpack官方文档中How to write a plugin章节有对compilation的详解。\n> A compilation object represents a single build of versioned assets. While running Webpack development middleware, a new compilation will be created each time a file change is detected, thus generating a new set of compiled assets. A compilation surfaces information about the present state of module resources, compiled assets, changed files, and watched dependencies.\n\ncompilation对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。compilation对象包含当前模块资源、待编译文件、有改动的文件和监听依赖的所有信息。\n\n与compilation对应的有个compiler对象，通过对比，可以帮助大家对compilation有更深入的理解。\n\n#### 1.2、compiler\n>The compiler object represents the fully configured Webpack environment. This object is built once upon starting Webpack, and is configured with all operational settings including options, loaders, and plugins.\n\ncompiler对象代表的是配置完备的Webpack环境。 compiler对象只在Webpack启动时构建一次，由Webpack组合所有的配置项构建生成。\n\n简单的讲，compiler对象代表的是不变的webpack环境，是针对webpack的；而compilation对象针对的是随时可变的项目文件，只要文件有改动，compilation就会被重新创建。\n\n#### 1.3、使用对比\ncompilation在项目中任何一个文件改动后就会被重新创建，然后webpack计算新的compilation的hash值，这个hash值便是`hash`。\n\n如果使用hash作为编译输出文件的hash指纹的话，如下：\n\n```javascript\noutput: {\n    filename: '[name].[hash:8].js',\n    path: __dirname + '/build'\n}\n```\n\nhash是compilation对象计算所得，而不是具体的项目文件计算所得。所以以上配置的编译输出文件，所有的文件名都会使用相同的hash指纹。如下：\n\n![](https://lh3.googleusercontent.com/-wlJUDhxMPqU/Wh7zMZjuqfI/AAAAAAAAABk/IhEtsJXAHL0bPovXAgeSV4NB7e-UWXjsQCHMYCw/I/15119373145001.jpg)\n这样带来的问题是，三个js文件任何一个改动都会影响另外两个文件的最终文件名。上线后，另外两个文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。\n\n那么如何避免这个问题呢？答案就是chunkhash！\n\n根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：\n\n```javascript\noutput: {\n    filename: '[name].[chunkhash:8].js',\n    path: __dirname + '/build'\n}\n```\n\n编译输出的文件为：\n\n![](https://lh3.googleusercontent.com/-SrxuYiL3LV8/Wh7zM3v49mI/AAAAAAAAABo/empy-1upuAsdOf5JQjUYV0_lfdLKbX5ywCHMYCw/I/15119400009939.jpg)\n每个文件的hash指纹都不相同，上线后无改动的文件不会失去缓存。\n\n>不要在开发环境使用 [chunkhash]/[hash]/[contenthash]，因为不需要在开发环境做持久缓存，而且这样会增加编译时间，开发环境用 [name] 就可以了。\n\n### 2、contenthash\nwebpack将style视为js的一部分，所以在计算chunkhash时，会把所有的js代码和style代码混合在一起计算。比如main.js引用了main.scss:\n\n```\nimport 'main.scss';\nalert('I am main.js');\n```\n\nmain.scss的内容如下：\n\n```\nbody{\n    color: #000;\n}\n```\nwebpack计算chunkhash时，以main.js文件为编译入口，整个chunk的内容会将main.scss的内容也计算在内：\n\n```\nbody{\n    color: #000;\n}\nalert('I am main.js');\n```\n所以，不论是修改了js代码还是scss代码，整个chunk的内容都改变了，计算所得的chunkhash自然就不同了。\n\n我们一般会通过`extract-text-webpack-plugin`将样式文件单独抽取出来，但是不管是不是抽取出来了，chunkhash的计算方式还是合在一起算的， js 和 css 输出的文件用的是同一个 chunkhash，所以还是会存在问题。不过，该插件提供了另外一种hash值：`contenthash`。\n\n顾名思义，contenthash代表的是文本文件内容的hash值，也就是只有style文件的hash值。\n\n```\nnew ExtractTextPlugin('[name].[contenthash].css');\n```\n这样，编译出来的js和css文件将会有独立的hash指纹。并且如果我们只是修改了js代码，css的hash值也不会变化的。\n\n但是，反过来看，当我们如果修改css文件的时候，会发现js的hash还是会变化，还是因为之前提到的，chunkhash会计算js和css为入口，就算css已经提出去了。那么怎么去解决呢？\n\n### 3、入坑webpack-md5-hash\n\nwebpack-md5-hash做了些什么？\n这里提到一个概念叫`chunk-hash`，并不是webpack中另一种hash值，而是compilation执行生命周期中的一个钩子。\n\n```\nthis.applyPlugins(\"chunk-hash\", chunk, chunkHash);\n```\n\nchunk-hash是在`chunhash计算完毕之后执行的`，这就意味着如果我们在chunk-hash钩子中可以用新的chunkhash替换已存在的值。webpack-md5-hash便是如此实现的，用了另外一种计算方式，去生成hash值。\n\n看上去一切都很美好，使用了webpack-md5-hash之后，我们去修改css文件的时候，会发现js的hash没有发生变化。那么webpack-md5-hash到底做了些什么？\n\n#### 3.1 webpack-md5-hash做了什么？\n\n![](https://lh3.googleusercontent.com/-FHhesndXOUY/Wh7zNFCIjrI/AAAAAAAAABs/pfTwbRJhcJIVDxYOxWbRAMZqASq52iVXQCHMYCw/I/15119733897082.jpg)\n\n通过模块路径来排序 chunk 的所有依赖模块（仅这个 chunk 中的模块，不含被 CommonsChunkPlugin 剔除的模块），并将这些排序后的模块源代码拼接，最后用 MD5 拼接后内容的 chunkhash。插件这么做的好处是，使 chunkhash 与该 chunk 内代码做直接关联，让 chunk 与其依赖的模块 ID 无关化，无论模块 ID 如何变化，都不会影响父 chunk 的实质内容及 chunkhash。\n\n#### 3.2 存在的问题？\n* 当仅有modules id发生改变的时候，hash值不会发生变化（https://github.com/erm0l0v/webpack-md5-hash/issues/7 ）\n*  它的计算方法是只计算模块本身的当前内容（包括同步模块），也就是上文的代码。这种计算方式把异步模块的内容忽略掉了。也就是说，`主文件计算hash值时没有把异步模块的内容计算在内`。\n\n ![](https://lh3.googleusercontent.com/-to9DqvWoUYY/Wh7zNoLxVyI/AAAAAAAAABw/P3PZbCWJBegTFfml526mt5eiq7HMMbesACHMYCw/I/15119741407593.jpg)\n\n#### 3.3 异步模块问题如何导致的?\n例如：入口文件main.app.js的代码如下：\n\n```\nimport '../style/main.app.scss';\n\nconsole.log('main');\nwindow.onload = function(){\n    require.ensure([],(require)=>{\n        require('./part.a.js');\n    });\n}\n```\n\n异步模块part.a.js代码如下：\n\n```\nconsole.log('part a');\nsetTimeout(()=>{\n    require.ensure([],(require)=>{\n        require('./part.b.js');\n    });\n},10000);\n```\n\n异步模块part.b.js代码如下：\n\n```\nimport fn_c from './part.c.js';\nimport fn_d from './part.d.js';\n\nconsole.log('part b');\n```\n\n使用webpack将以上源代码进行编译，输出以下文件：\n\n-------\n\n* main.app.[chunkhash].js：主文件；\n* part.a.[chunkhash].js：异步模块a；\n* part.b.[chunkhash].js：异步模块b；\n* main.app.[chunkhash].css：样式文件。\n\n-------\n\n如果我们修改了part.a.js源码，编译的结果文件哪些文件的hash改变了？ 答案是：只有part.a.[chunkhash].js的hash改变了，其余文件的hash都与修改前一致。那么这种结果是否合理呢？\n\n我们首先了解一下webpack runtime是如何加载异步模块的？\n\n```\nvar head = document.getElementsByTagName('head')[0];\nvar script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.charset = 'utf-8';\nscript.async = true;\n\nscript.src = __webpack_require__.p + \"js/part/part.\" + ({\n    \"1\": \"a\",\n    \"2\": \"b\"\n    }[chunkId] || chunkId) + \".\" + {\n    \"1\": \"f5ea7d95\",\n    \"2\": \"b93662b0\"\n}[chunkId] + \".js\";\n\nhead.appendChild(script);\n```\n\n上述代码是编译生成的main.app.[chunkhash].js中实现懒加载的逻辑，原理就是大家熟知的动态生成script标签。但是在对script.src赋值时，webpack有以下三个概念需要知晓：\n\n-------\n\n* chunkId，对应上述代码中的\"1\"和\"2\"；\n* chunkName，对应上述代码中的\"a\"和\"b\"；\n* chunkHash，对应上述代码中的\"f5ea7d95\"和\"b93662b0\"。\n\n-------\n\n\n也就是说，part.a.[chunkhash].js和part.b.[chunkhash].js的hash值是写死在main.app.[chunkhash].js中的。按照之前的编译结果，part.a.[chunkhash].js的hash变了，但是main.app.[chunkhash].js的hash没变，那么用户的浏览器仍然缓存着旧版本的main.app.[chunkhash].js，此时异步加载的part.a.[chunkhash].js仍然是旧版本的文件。这显然是不符合需求的。\n\n因此懒加载模块的改动经编译，去引用的主文件的hash值没有变化，影响了版本发布。\n所以建议在采用这种插件的时候，一定要搞清楚它的原理和做的事情，否则容易入坑。\n\n### 4、不稳定的chunkhash\n计算 chunk MD5 摘要并修改 chunk 资源文件名是不够的，Chunk 的生成还涉及到依赖解析和模块 ID 分配，例如：我们都会在 webpack 里面定义 common chunk 提取公共代码，虽然只修改了 app.js 的代码，但在最终的构建结果中，vendor.js 的 chunkhash 也被修改了，尽管 vendor.js 的内容没有实质变化。这样我们无法提高缓存的利用率。\n\n#### 4.1、编译中会导致缓存失效的因素\n在一个 webpack 编译出的分块 (chunk) 文件中，内容分为如下四部分：\n\n* 包含的模块的源代码\n* webpack 生成的模块 id (module id) (包括包含的模块 id, 以及该模块引用的依赖模块的 id)\n* webpack 用于启动运行的 bootstrap runtime\n* Chunk ID\n\n那块这些情况会导致缓存失效：\n##### 1、源代码的变更\n这个不说了\n\n##### 2、webpack 生成的模块 id变动\n\n```\n(function (modules) { // webpackBootstrap\n    // ...\n})([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n    __webpack_require__(1);\n    module.exports = 'entry_1.js';\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n    __webpack_require__(2);\n    module.exports = 'test_1.js';\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n    module.exports = 'test_2.js';\n/***/ }\n/******/ ])\n```\n\n如上，注释中的 /* 0 */ ... /* 1 */ ... 就是该模块对应的 id。\n默认，模块的 ID 是 webpack 根据依赖的收集顺序递增的正整数，这种 ID 分配方式不太稳定，。假设新增/删除一个模块引用，或者依赖的顺序变一下，计算结果就可能变化，导致一些模块 id 发生变化，最终导致输出 chunk 变化，缓存失效。这一条几乎会导致所有输出的分块内容都发生变化。\n\n`如何解决这个问题？`\n\n我们需要固定id的计算方式，那么一个模块文件的什么信息是固定的？ -----文件路径\n可以使用两个插件来解决这个问题：\n* NamedModulesPlugin\n* HashedModuleIdsPlugin\n他们都已经被添加到了webpack中，可以直接使用：\n\n```\nnew webpack.HashedModuleIdsPlugin()\n```\n前者将递增 ID 替换为模块相对路径，可读性强，不过，构建出来的 chunk 会充满各种路径，使文件增大。后者是前者的进阶模块，它在其基础上对模块路径进行 MD5 摘要。到此module id的生成规则稳定下来。\n\n##### 3、webpack bootstrap runtime 变动\n上面的代码里 /* 0 */ ... /* 1 */ ... 对应的都是模块定义，要让程序运行起来还需要一小段启动代码，这个就是 webpack bootstrap runtime，它长这样：\n\n```\n(function(modules) { // webpackBootstrap\n/******/    // The module cache\n/******/    var installedModules = {};\n\n/******/    // The require function\n/******/    function __webpack_require__(moduleId) {\n\n/******/        // Check if module is in cache\n/******/        if(installedModules[moduleId])\n/******/            return installedModules[moduleId].exports;\n\n/******/        // Create a new module (and put it into the cache)\n/******/        var module = installedModules[moduleId] = {\n/******/            exports: {},\n/******/            id: moduleId,\n/******/            loaded: false\n/******/        };\n\n/******/        // Execute the module function\n/******/        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/        // Flag the module as loaded\n/******/        module.loaded = true;\n\n/******/        // Return the exports of the module\n/******/        return module.exports;\n/******/    }\n\n/******/    // expose the modules object (__webpack_modules__)\n/******/    __webpack_require__.m = modules;\n\n/******/    // expose the module cache\n/******/    __webpack_require__.c = installedModules;\n\n/******/    // __webpack_public_path__\n/******/    __webpack_require__.p = \"/build/\";\n\n/******/    // Load entry module and return exports\n/******/    return __webpack_require__(0);\n/******/ })(/* modules */)\n```\n\n其他的都是配置项，启动程序的代码在这一个函数的最后一行：return __webpack_require__(0);，立即执行 id 为0的模块。\n\n这么看好像每次编译的时候这个 runtime 不会有什么变化，然而实际项目中往往为了缓存利用率以及按需加载引入了多个分块 (chunk)，包括公共分块和按需加载的分块。我们可以看到：\n\n```\n/******/    // This file contains only the entry chunk.\n/******/    // The chunk loading function for additional chunks\n/******/    __webpack_require__.e = function requireEnsure(chunkId, callback) {\n/******/        // \"0\" is the signal for \"already loaded\"\n/******/        if(installedChunks[chunkId] === 0)\n/******/            return callback.call(null, __webpack_require__);\n\n/******/        // an array means \"currently loading\".\n/******/        if(installedChunks[chunkId] !== undefined) {\n/******/            installedChunks[chunkId].push(callback);\n/******/        } else {\n/******/            // start chunk loading\n/******/            installedChunks[chunkId] = [callback];\n/******/            var head = document.getElementsByTagName('head')[0];\n/******/            var script = document.createElement('script');\n/******/            script.type = 'text/javascript';\n/******/            script.charset = 'utf-8';\n/******/            script.async = true;\n\n/******/            script.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({\"0\":\"e_1\",\"1\":\"e_2\"}[chunkId]||chunkId) + \".\" + {\"0\":\"d0c1831ff024c3aeb47a\",\"1\":\"50dc9cf2b5e52bc9e61a\"}[chunkId] + \".js\";\n/******/            head.appendChild(script);\n/******/        }\n/******/    };\n```\n这个时候我们可以看看到，最后会有一个文件名映射表，它包含chunks ID 及其对应 chunkhash 的对象，那么runtime 中的文件名映射就跟着改了，这个分块也就被修改了。\n\n`如何解决这个问题？`\nruntime中变动的就是其中的文件名信息，我们把这总是变动的部分单独拎出来，不要让它影响公共分块或者入口分块。\nCommonsChunkPlugin可以帮我们抽取出来：\n\n> CommonsChunkPlugin 可以用于将模块分离到单独的文件中。然而 CommonsChunkPlugin 有一个较少有人知道的功能是，能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定 entry 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：\n\n```\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: Infinity\n    }),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest'\n    }),\n```\n这样就会生成一个特别小（不足 2kb）的 manifest.js解决了 libs 经常被更新的问题。同时我们可以使用[inline-manifest-webpack-plugin](https://github.com/szrenwei/inline-manifest-webpack-plugin)将 manifest 转为内联在 html 内的 inline script\n\n##### 4、Chunk ID变动\n\n```\nwebpackJsonp([0,1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n    __webpack_require__(1);\n    module.exports = 'entry.js';\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n    module.exports = 'test.js';\n\n/***/ }\n]);\n```\n\n这里函数调用的第一个参数 [0,1] 就对应了这个分块的 id。\n同模块 id 一样, 分块 id 的计算与分块引入顺序有关，官方有提供NamedChunksPlugin插件来根据文件名来稳定你的chunkid。\n\n```\nnew webpack.NamedChunksPlugin()\n```\n\n### 5、总结\n\n```\noutput: {\n    filename: '[name].[chunkhash].js',\n    chunkFilename: '[name].[chunkhash].js'\n},\nplugins: [\n    // 单独提取 webpack runtime manifest\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest'\n    }),\n\n    new HtmlWebpackPlugin({\n      template: 'src/pages/index.ejs',\n      chunks: ['manifest',  'vendor']\n    }),\n\n    //内联manifest\n    new InlineManifestWebpackPlugin(),\n\n    // 用文件路径当 id，固定module id\n    new webpack.HashedModuleIdsPlugin(),\n\n    // 文件名固定chunk id\n    new webpack.NamedChunksPlugin(),\n\n    //css 输出按实际内容计算 hash\n    new ExtractTextWebpackPlugin({filename: '[name].[contenthash].css'}),\n]\n```","slug":"Hash规则","published":1,"updated":"2018-04-18T08:59:11.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnn6in9b0005owt1tjdig3zj","content":"<h1 id=\"Hash规则\"><a href=\"#Hash规则\" class=\"headerlink\" title=\"Hash规则\"></a>Hash规则</h1><h2 id=\"B端hash问题\"><a href=\"#B端hash问题\" class=\"headerlink\" title=\"B端hash问题\"></a>B端hash问题</h2><p>1、原本主文档引用的文件，hash生成交由CI处理，但是资源路径配置错误，导致CI替换失败，异步脚本正常更新，但是主文档中引用的是老的文件。</p>\n<p>2、chunk文件内容未修改，引用的module Id有变更，但是hash值未更新，导致新老版本加载报错。</p>\n<p>3、为了解决CDN上缓存了错误的文件版本hash的问题，引入了webpack-md5-hash重新生成了文件hash规则。</p>\n<p>4、发现webpack-md5-hash插件本身hash策略有问题：module id改变或者异步chunk改变，都不会更新hash值，导致错误的引用。</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"1、hash与chunkHash的区别\"><a href=\"#1、hash与chunkHash的区别\" class=\"headerlink\" title=\"1、hash与chunkHash的区别\"></a>1、hash与chunkHash的区别</h3><p>文件的hash指纹通常作为前端静态资源实现增量更新的方案之一，在Webpack编译输出文件的配置过程中，如果需要为文件加入hash指纹，Webpack提供了两个配置项可供使用：hash和chunkhash。那么两者有何区别呢？其各自典型的应用场景又是什么？</p>\n<p><img src=\"https://lh3.googleusercontent.com/-feuxO7i_WpU/WiisDUxOPBI/AAAAAAAAACc/5ENERNx9V4QDEK41xCp8IR8nojsfU5qWQCHMYCw/I/15120231856243.jpg\" alt=\"\"></p>\n<p>首先我们先看一下官方文档对于两者的定义：</p>\n<blockquote>\n<p>[hash] is replaced by the hash of the compilation.</p>\n</blockquote>\n<p><code>hash</code>代表的是compilation的hash值。</p>\n<blockquote>\n<p>[chunkhash] is replaced by the hash of the chunk.</p>\n</blockquote>\n<p><code>chunkhash</code>代表的是chunk的hash值。</p>\n<p>chunkhash很好理解，chunk在Webpack中的含义我们都清楚，简单讲，chunk就是模块。chunkhash也就是根据模块内容计算出的hash值。</p>\n<p>那么该如何理解hash是compilation的hash值这句话呢？首先先讲解一下Webpack中compilation的含义。</p>\n<h4 id=\"1-1、compilation\"><a href=\"#1-1、compilation\" class=\"headerlink\" title=\"1.1、compilation\"></a>1.1、compilation</h4><p>Webpack官方文档中How to write a plugin章节有对compilation的详解。</p>\n<blockquote>\n<p>A compilation object represents a single build of versioned assets. While running Webpack development middleware, a new compilation will be created each time a file change is detected, thus generating a new set of compiled assets. A compilation surfaces information about the present state of module resources, compiled assets, changed files, and watched dependencies.</p>\n</blockquote>\n<p>compilation对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。compilation对象包含当前模块资源、待编译文件、有改动的文件和监听依赖的所有信息。</p>\n<p>与compilation对应的有个compiler对象，通过对比，可以帮助大家对compilation有更深入的理解。</p>\n<h4 id=\"1-2、compiler\"><a href=\"#1-2、compiler\" class=\"headerlink\" title=\"1.2、compiler\"></a>1.2、compiler</h4><blockquote>\n<p>The compiler object represents the fully configured Webpack environment. This object is built once upon starting Webpack, and is configured with all operational settings including options, loaders, and plugins.</p>\n</blockquote>\n<p>compiler对象代表的是配置完备的Webpack环境。 compiler对象只在Webpack启动时构建一次，由Webpack组合所有的配置项构建生成。</p>\n<p>简单的讲，compiler对象代表的是不变的webpack环境，是针对webpack的；而compilation对象针对的是随时可变的项目文件，只要文件有改动，compilation就会被重新创建。</p>\n<h4 id=\"1-3、使用对比\"><a href=\"#1-3、使用对比\" class=\"headerlink\" title=\"1.3、使用对比\"></a>1.3、使用对比</h4><p>compilation在项目中任何一个文件改动后就会被重新创建，然后webpack计算新的compilation的hash值，这个hash值便是<code>hash</code>。</p>\n<p>如果使用hash作为编译输出文件的hash指纹的话，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash:8].js'</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/build'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hash是compilation对象计算所得，而不是具体的项目文件计算所得。所以以上配置的编译输出文件，所有的文件名都会使用相同的hash指纹。如下：</p>\n<p><img src=\"https://lh3.googleusercontent.com/-wlJUDhxMPqU/Wh7zMZjuqfI/AAAAAAAAABk/IhEtsJXAHL0bPovXAgeSV4NB7e-UWXjsQCHMYCw/I/15119373145001.jpg\" alt=\"\"><br>这样带来的问题是，三个js文件任何一个改动都会影响另外两个文件的最终文件名。上线后，另外两个文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。</p>\n<p>那么如何避免这个问题呢？答案就是chunkhash！</p>\n<p>根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[chunkhash:8].js'</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/build'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译输出的文件为：</p>\n<p><img src=\"https://lh3.googleusercontent.com/-SrxuYiL3LV8/Wh7zM3v49mI/AAAAAAAAABo/empy-1upuAsdOf5JQjUYV0_lfdLKbX5ywCHMYCw/I/15119400009939.jpg\" alt=\"\"><br>每个文件的hash指纹都不相同，上线后无改动的文件不会失去缓存。</p>\n<blockquote>\n<p>不要在开发环境使用 [chunkhash]/[hash]/[contenthash]，因为不需要在开发环境做持久缓存，而且这样会增加编译时间，开发环境用 [name] 就可以了。</p>\n</blockquote>\n<h3 id=\"2、contenthash\"><a href=\"#2、contenthash\" class=\"headerlink\" title=\"2、contenthash\"></a>2、contenthash</h3><p>webpack将style视为js的一部分，所以在计算chunkhash时，会把所有的js代码和style代码混合在一起计算。比如main.js引用了main.scss:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;main.scss&apos;;</span><br><span class=\"line\">alert(&apos;I am main.js&apos;);</span><br></pre></td></tr></table></figure>\n<p>main.scss的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    color: #000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack计算chunkhash时，以main.js文件为编译入口，整个chunk的内容会将main.scss的内容也计算在内：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    color: #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(&apos;I am main.js&apos;);</span><br></pre></td></tr></table></figure>\n<p>所以，不论是修改了js代码还是scss代码，整个chunk的内容都改变了，计算所得的chunkhash自然就不同了。</p>\n<p>我们一般会通过<code>extract-text-webpack-plugin</code>将样式文件单独抽取出来，但是不管是不是抽取出来了，chunkhash的计算方式还是合在一起算的， js 和 css 输出的文件用的是同一个 chunkhash，所以还是会存在问题。不过，该插件提供了另外一种hash值：<code>contenthash</code>。</p>\n<p>顾名思义，contenthash代表的是文本文件内容的hash值，也就是只有style文件的hash值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new ExtractTextPlugin(&apos;[name].[contenthash].css&apos;);</span><br></pre></td></tr></table></figure>\n<p>这样，编译出来的js和css文件将会有独立的hash指纹。并且如果我们只是修改了js代码，css的hash值也不会变化的。</p>\n<p>但是，反过来看，当我们如果修改css文件的时候，会发现js的hash还是会变化，还是因为之前提到的，chunkhash会计算js和css为入口，就算css已经提出去了。那么怎么去解决呢？</p>\n<h3 id=\"3、入坑webpack-md5-hash\"><a href=\"#3、入坑webpack-md5-hash\" class=\"headerlink\" title=\"3、入坑webpack-md5-hash\"></a>3、入坑webpack-md5-hash</h3><p>webpack-md5-hash做了些什么？<br>这里提到一个概念叫<code>chunk-hash</code>，并不是webpack中另一种hash值，而是compilation执行生命周期中的一个钩子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.applyPlugins(&quot;chunk-hash&quot;, chunk, chunkHash);</span><br></pre></td></tr></table></figure>\n<p>chunk-hash是在<code>chunhash计算完毕之后执行的</code>，这就意味着如果我们在chunk-hash钩子中可以用新的chunkhash替换已存在的值。webpack-md5-hash便是如此实现的，用了另外一种计算方式，去生成hash值。</p>\n<p>看上去一切都很美好，使用了webpack-md5-hash之后，我们去修改css文件的时候，会发现js的hash没有发生变化。那么webpack-md5-hash到底做了些什么？</p>\n<h4 id=\"3-1-webpack-md5-hash做了什么？\"><a href=\"#3-1-webpack-md5-hash做了什么？\" class=\"headerlink\" title=\"3.1 webpack-md5-hash做了什么？\"></a>3.1 webpack-md5-hash做了什么？</h4><p><img src=\"https://lh3.googleusercontent.com/-FHhesndXOUY/Wh7zNFCIjrI/AAAAAAAAABs/pfTwbRJhcJIVDxYOxWbRAMZqASq52iVXQCHMYCw/I/15119733897082.jpg\" alt=\"\"></p>\n<p>通过模块路径来排序 chunk 的所有依赖模块（仅这个 chunk 中的模块，不含被 CommonsChunkPlugin 剔除的模块），并将这些排序后的模块源代码拼接，最后用 MD5 拼接后内容的 chunkhash。插件这么做的好处是，使 chunkhash 与该 chunk 内代码做直接关联，让 chunk 与其依赖的模块 ID 无关化，无论模块 ID 如何变化，都不会影响父 chunk 的实质内容及 chunkhash。</p>\n<h4 id=\"3-2-存在的问题？\"><a href=\"#3-2-存在的问题？\" class=\"headerlink\" title=\"3.2 存在的问题？\"></a>3.2 存在的问题？</h4><ul>\n<li>当仅有modules id发生改变的时候，hash值不会发生变化（<a href=\"https://github.com/erm0l0v/webpack-md5-hash/issues/7\" target=\"_blank\" rel=\"noopener\">https://github.com/erm0l0v/webpack-md5-hash/issues/7</a> ）</li>\n<li><p>它的计算方法是只计算模块本身的当前内容（包括同步模块），也就是上文的代码。这种计算方式把异步模块的内容忽略掉了。也就是说，<code>主文件计算hash值时没有把异步模块的内容计算在内</code>。</p>\n<p><img src=\"https://lh3.googleusercontent.com/-to9DqvWoUYY/Wh7zNoLxVyI/AAAAAAAAABw/P3PZbCWJBegTFfml526mt5eiq7HMMbesACHMYCw/I/15119741407593.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"3-3-异步模块问题如何导致的\"><a href=\"#3-3-异步模块问题如何导致的\" class=\"headerlink\" title=\"3.3 异步模块问题如何导致的?\"></a>3.3 异步模块问题如何导致的?</h4><p>例如：入口文件main.app.js的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;../style/main.app.scss&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;main&apos;);</span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    require.ensure([],(require)=&gt;&#123;</span><br><span class=\"line\">        require(&apos;./part.a.js&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步模块part.a.js代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;part a&apos;);</span><br><span class=\"line\">setTimeout(()=&gt;&#123;</span><br><span class=\"line\">    require.ensure([],(require)=&gt;&#123;</span><br><span class=\"line\">        require(&apos;./part.b.js&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,10000);</span><br></pre></td></tr></table></figure>\n<p>异步模块part.b.js代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import fn_c from &apos;./part.c.js&apos;;</span><br><span class=\"line\">import fn_d from &apos;./part.d.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;part b&apos;);</span><br></pre></td></tr></table></figure>\n<p>使用webpack将以上源代码进行编译，输出以下文件：</p>\n<hr>\n<ul>\n<li>main.app.[chunkhash].js：主文件；</li>\n<li>part.a.[chunkhash].js：异步模块a；</li>\n<li>part.b.[chunkhash].js：异步模块b；</li>\n<li>main.app.[chunkhash].css：样式文件。</li>\n</ul>\n<hr>\n<p>如果我们修改了part.a.js源码，编译的结果文件哪些文件的hash改变了？ 答案是：只有part.a.[chunkhash].js的hash改变了，其余文件的hash都与修改前一致。那么这种结果是否合理呢？</p>\n<p>我们首先了解一下webpack runtime是如何加载异步模块的？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var head = document.getElementsByTagName(&apos;head&apos;)[0];</span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">script.type = &apos;text/javascript&apos;;</span><br><span class=\"line\">script.charset = &apos;utf-8&apos;;</span><br><span class=\"line\">script.async = true;</span><br><span class=\"line\"></span><br><span class=\"line\">script.src = __webpack_require__.p + &quot;js/part/part.&quot; + (&#123;</span><br><span class=\"line\">    &quot;1&quot;: &quot;a&quot;,</span><br><span class=\"line\">    &quot;2&quot;: &quot;b&quot;</span><br><span class=\"line\">    &#125;[chunkId] || chunkId) + &quot;.&quot; + &#123;</span><br><span class=\"line\">    &quot;1&quot;: &quot;f5ea7d95&quot;,</span><br><span class=\"line\">    &quot;2&quot;: &quot;b93662b0&quot;</span><br><span class=\"line\">&#125;[chunkId] + &quot;.js&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">head.appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>上述代码是编译生成的main.app.[chunkhash].js中实现懒加载的逻辑，原理就是大家熟知的动态生成script标签。但是在对script.src赋值时，webpack有以下三个概念需要知晓：</p>\n<hr>\n<ul>\n<li>chunkId，对应上述代码中的”1”和”2”；</li>\n<li>chunkName，对应上述代码中的”a”和”b”；</li>\n<li>chunkHash，对应上述代码中的”f5ea7d95”和”b93662b0”。</li>\n</ul>\n<hr>\n<p>也就是说，part.a.[chunkhash].js和part.b.[chunkhash].js的hash值是写死在main.app.[chunkhash].js中的。按照之前的编译结果，part.a.[chunkhash].js的hash变了，但是main.app.[chunkhash].js的hash没变，那么用户的浏览器仍然缓存着旧版本的main.app.[chunkhash].js，此时异步加载的part.a.[chunkhash].js仍然是旧版本的文件。这显然是不符合需求的。</p>\n<p>因此懒加载模块的改动经编译，去引用的主文件的hash值没有变化，影响了版本发布。<br>所以建议在采用这种插件的时候，一定要搞清楚它的原理和做的事情，否则容易入坑。</p>\n<h3 id=\"4、不稳定的chunkhash\"><a href=\"#4、不稳定的chunkhash\" class=\"headerlink\" title=\"4、不稳定的chunkhash\"></a>4、不稳定的chunkhash</h3><p>计算 chunk MD5 摘要并修改 chunk 资源文件名是不够的，Chunk 的生成还涉及到依赖解析和模块 ID 分配，例如：我们都会在 webpack 里面定义 common chunk 提取公共代码，虽然只修改了 app.js 的代码，但在最终的构建结果中，vendor.js 的 chunkhash 也被修改了，尽管 vendor.js 的内容没有实质变化。这样我们无法提高缓存的利用率。</p>\n<h4 id=\"4-1、编译中会导致缓存失效的因素\"><a href=\"#4-1、编译中会导致缓存失效的因素\" class=\"headerlink\" title=\"4.1、编译中会导致缓存失效的因素\"></a>4.1、编译中会导致缓存失效的因素</h4><p>在一个 webpack 编译出的分块 (chunk) 文件中，内容分为如下四部分：</p>\n<ul>\n<li>包含的模块的源代码</li>\n<li>webpack 生成的模块 id (module id) (包括包含的模块 id, 以及该模块引用的依赖模块的 id)</li>\n<li>webpack 用于启动运行的 bootstrap runtime</li>\n<li>Chunk ID</li>\n</ul>\n<p>那块这些情况会导致缓存失效：</p>\n<h5 id=\"1、源代码的变更\"><a href=\"#1、源代码的变更\" class=\"headerlink\" title=\"1、源代码的变更\"></a>1、源代码的变更</h5><p>这个不说了</p>\n<h5 id=\"2、webpack-生成的模块-id变动\"><a href=\"#2、webpack-生成的模块-id变动\" class=\"headerlink\" title=\"2、webpack 生成的模块 id变动\"></a>2、webpack 生成的模块 id变动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123; // webpackBootstrap</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\">/* 0 */</span><br><span class=\"line\">/***/ function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">    __webpack_require__(1);</span><br><span class=\"line\">    module.exports = &apos;entry_1.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;,</span><br><span class=\"line\">/* 1 */</span><br><span class=\"line\">/***/ function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">    __webpack_require__(2);</span><br><span class=\"line\">    module.exports = &apos;test_1.js&apos;;</span><br><span class=\"line\">/***/ &#125;,</span><br><span class=\"line\">/* 2 */</span><br><span class=\"line\">/***/ function(module, exports) &#123;</span><br><span class=\"line\">    module.exports = &apos;test_2.js&apos;;</span><br><span class=\"line\">/***/ &#125;</span><br><span class=\"line\">/******/ ])</span><br></pre></td></tr></table></figure>\n<p>如上，注释中的 /<em> 0 </em>/ … /<em> 1 </em>/ … 就是该模块对应的 id。<br>默认，模块的 ID 是 webpack 根据依赖的收集顺序递增的正整数，这种 ID 分配方式不太稳定，。假设新增/删除一个模块引用，或者依赖的顺序变一下，计算结果就可能变化，导致一些模块 id 发生变化，最终导致输出 chunk 变化，缓存失效。这一条几乎会导致所有输出的分块内容都发生变化。</p>\n<p><code>如何解决这个问题？</code></p>\n<p>我们需要固定id的计算方式，那么一个模块文件的什么信息是固定的？ —–文件路径<br>可以使用两个插件来解决这个问题：</p>\n<ul>\n<li>NamedModulesPlugin</li>\n<li>HashedModuleIdsPlugin<br>他们都已经被添加到了webpack中，可以直接使用：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.HashedModuleIdsPlugin()</span><br></pre></td></tr></table></figure>\n<p>前者将递增 ID 替换为模块相对路径，可读性强，不过，构建出来的 chunk 会充满各种路径，使文件增大。后者是前者的进阶模块，它在其基础上对模块路径进行 MD5 摘要。到此module id的生成规则稳定下来。</p>\n<h5 id=\"3、webpack-bootstrap-runtime-变动\"><a href=\"#3、webpack-bootstrap-runtime-变动\" class=\"headerlink\" title=\"3、webpack bootstrap runtime 变动\"></a>3、webpack bootstrap runtime 变动</h5><p>上面的代码里 /<em> 0 </em>/ … /<em> 1 </em>/ … 对应的都是模块定义，要让程序运行起来还需要一小段启动代码，这个就是 webpack bootstrap runtime，它长这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(modules) &#123; // webpackBootstrap</span><br><span class=\"line\">/******/    // The module cache</span><br><span class=\"line\">/******/    var installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // The require function</span><br><span class=\"line\">/******/    function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Check if module is in cache</span><br><span class=\"line\">/******/        if(installedModules[moduleId])</span><br><span class=\"line\">/******/            return installedModules[moduleId].exports;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Create a new module (and put it into the cache)</span><br><span class=\"line\">/******/        var module = installedModules[moduleId] = &#123;</span><br><span class=\"line\">/******/            exports: &#123;&#125;,</span><br><span class=\"line\">/******/            id: moduleId,</span><br><span class=\"line\">/******/            loaded: false</span><br><span class=\"line\">/******/        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Execute the module function</span><br><span class=\"line\">/******/        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Flag the module as loaded</span><br><span class=\"line\">/******/        module.loaded = true;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Return the exports of the module</span><br><span class=\"line\">/******/        return module.exports;</span><br><span class=\"line\">/******/    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // expose the modules object (__webpack_modules__)</span><br><span class=\"line\">/******/    __webpack_require__.m = modules;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // expose the module cache</span><br><span class=\"line\">/******/    __webpack_require__.c = installedModules;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // __webpack_public_path__</span><br><span class=\"line\">/******/    __webpack_require__.p = &quot;/build/&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // Load entry module and return exports</span><br><span class=\"line\">/******/    return __webpack_require__(0);</span><br><span class=\"line\">/******/ &#125;)(/* modules */)</span><br></pre></td></tr></table></figure>\n<p>其他的都是配置项，启动程序的代码在这一个函数的最后一行：return <strong>webpack_require</strong>(0);，立即执行 id 为0的模块。</p>\n<p>这么看好像每次编译的时候这个 runtime 不会有什么变化，然而实际项目中往往为了缓存利用率以及按需加载引入了多个分块 (chunk)，包括公共分块和按需加载的分块。我们可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/******/    // This file contains only the entry chunk.</span><br><span class=\"line\">/******/    // The chunk loading function for additional chunks</span><br><span class=\"line\">/******/    __webpack_require__.e = function requireEnsure(chunkId, callback) &#123;</span><br><span class=\"line\">/******/        // &quot;0&quot; is the signal for &quot;already loaded&quot;</span><br><span class=\"line\">/******/        if(installedChunks[chunkId] === 0)</span><br><span class=\"line\">/******/            return callback.call(null, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // an array means &quot;currently loading&quot;.</span><br><span class=\"line\">/******/        if(installedChunks[chunkId] !== undefined) &#123;</span><br><span class=\"line\">/******/            installedChunks[chunkId].push(callback);</span><br><span class=\"line\">/******/        &#125; else &#123;</span><br><span class=\"line\">/******/            // start chunk loading</span><br><span class=\"line\">/******/            installedChunks[chunkId] = [callback];</span><br><span class=\"line\">/******/            var head = document.getElementsByTagName(&apos;head&apos;)[0];</span><br><span class=\"line\">/******/            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">/******/            script.type = &apos;text/javascript&apos;;</span><br><span class=\"line\">/******/            script.charset = &apos;utf-8&apos;;</span><br><span class=\"line\">/******/            script.async = true;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/            script.src = __webpack_require__.p + &quot;&quot; + chunkId + &quot;.&quot; + (&#123;&quot;0&quot;:&quot;e_1&quot;,&quot;1&quot;:&quot;e_2&quot;&#125;[chunkId]||chunkId) + &quot;.&quot; + &#123;&quot;0&quot;:&quot;d0c1831ff024c3aeb47a&quot;,&quot;1&quot;:&quot;50dc9cf2b5e52bc9e61a&quot;&#125;[chunkId] + &quot;.js&quot;;</span><br><span class=\"line\">/******/            head.appendChild(script);</span><br><span class=\"line\">/******/        &#125;</span><br><span class=\"line\">/******/    &#125;;</span><br></pre></td></tr></table></figure>\n<p>这个时候我们可以看看到，最后会有一个文件名映射表，它包含chunks ID 及其对应 chunkhash 的对象，那么runtime 中的文件名映射就跟着改了，这个分块也就被修改了。</p>\n<p><code>如何解决这个问题？</code><br>runtime中变动的就是其中的文件名信息，我们把这总是变动的部分单独拎出来，不要让它影响公共分块或者入口分块。<br>CommonsChunkPlugin可以帮我们抽取出来：</p>\n<blockquote>\n<p>CommonsChunkPlugin 可以用于将模块分离到单独的文件中。然而 CommonsChunkPlugin 有一个较少有人知道的功能是，能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定 entry 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">  name: &apos;vendor&apos;,</span><br><span class=\"line\">  minChunks: Infinity</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">  name: &apos;manifest&apos;</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>这样就会生成一个特别小（不足 2kb）的 manifest.js解决了 libs 经常被更新的问题。同时我们可以使用<a href=\"https://github.com/szrenwei/inline-manifest-webpack-plugin\" target=\"_blank\" rel=\"noopener\">inline-manifest-webpack-plugin</a>将 manifest 转为内联在 html 内的 inline script</p>\n<h5 id=\"4、Chunk-ID变动\"><a href=\"#4、Chunk-ID变动\" class=\"headerlink\" title=\"4、Chunk ID变动\"></a>4、Chunk ID变动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackJsonp([0,1],[</span><br><span class=\"line\">/* 0 */</span><br><span class=\"line\">/***/ function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    __webpack_require__(1);</span><br><span class=\"line\">    module.exports = &apos;entry.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;,</span><br><span class=\"line\">/* 1 */</span><br><span class=\"line\">/***/ function(module, exports) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    module.exports = &apos;test.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>这里函数调用的第一个参数 [0,1] 就对应了这个分块的 id。<br>同模块 id 一样, 分块 id 的计算与分块引入顺序有关，官方有提供NamedChunksPlugin插件来根据文件名来稳定你的chunkid。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.NamedChunksPlugin()</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、总结\"><a href=\"#5、总结\" class=\"headerlink\" title=\"5、总结\"></a>5、总结</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: &apos;[name].[chunkhash].js&apos;,</span><br><span class=\"line\">    chunkFilename: &apos;[name].[chunkhash].js&apos;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    // 单独提取 webpack runtime manifest</span><br><span class=\"line\">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;manifest&apos;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &apos;src/pages/index.ejs&apos;,</span><br><span class=\"line\">      chunks: [&apos;manifest&apos;,  &apos;vendor&apos;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    //内联manifest</span><br><span class=\"line\">    new InlineManifestWebpackPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用文件路径当 id，固定module id</span><br><span class=\"line\">    new webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">    // 文件名固定chunk id</span><br><span class=\"line\">    new webpack.NamedChunksPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">    //css 输出按实际内容计算 hash</span><br><span class=\"line\">    new ExtractTextWebpackPlugin(&#123;filename: &apos;[name].[contenthash].css&apos;&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hash规则\"><a href=\"#Hash规则\" class=\"headerlink\" title=\"Hash规则\"></a>Hash规则</h1><h2 id=\"B端hash问题\"><a href=\"#B端hash问题\" class=\"headerlink\" title=\"B端hash问题\"></a>B端hash问题</h2><p>1、原本主文档引用的文件，hash生成交由CI处理，但是资源路径配置错误，导致CI替换失败，异步脚本正常更新，但是主文档中引用的是老的文件。</p>\n<p>2、chunk文件内容未修改，引用的module Id有变更，但是hash值未更新，导致新老版本加载报错。</p>\n<p>3、为了解决CDN上缓存了错误的文件版本hash的问题，引入了webpack-md5-hash重新生成了文件hash规则。</p>\n<p>4、发现webpack-md5-hash插件本身hash策略有问题：module id改变或者异步chunk改变，都不会更新hash值，导致错误的引用。</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"1、hash与chunkHash的区别\"><a href=\"#1、hash与chunkHash的区别\" class=\"headerlink\" title=\"1、hash与chunkHash的区别\"></a>1、hash与chunkHash的区别</h3><p>文件的hash指纹通常作为前端静态资源实现增量更新的方案之一，在Webpack编译输出文件的配置过程中，如果需要为文件加入hash指纹，Webpack提供了两个配置项可供使用：hash和chunkhash。那么两者有何区别呢？其各自典型的应用场景又是什么？</p>\n<p><img src=\"https://lh3.googleusercontent.com/-feuxO7i_WpU/WiisDUxOPBI/AAAAAAAAACc/5ENERNx9V4QDEK41xCp8IR8nojsfU5qWQCHMYCw/I/15120231856243.jpg\" alt=\"\"></p>\n<p>首先我们先看一下官方文档对于两者的定义：</p>\n<blockquote>\n<p>[hash] is replaced by the hash of the compilation.</p>\n</blockquote>\n<p><code>hash</code>代表的是compilation的hash值。</p>\n<blockquote>\n<p>[chunkhash] is replaced by the hash of the chunk.</p>\n</blockquote>\n<p><code>chunkhash</code>代表的是chunk的hash值。</p>\n<p>chunkhash很好理解，chunk在Webpack中的含义我们都清楚，简单讲，chunk就是模块。chunkhash也就是根据模块内容计算出的hash值。</p>\n<p>那么该如何理解hash是compilation的hash值这句话呢？首先先讲解一下Webpack中compilation的含义。</p>\n<h4 id=\"1-1、compilation\"><a href=\"#1-1、compilation\" class=\"headerlink\" title=\"1.1、compilation\"></a>1.1、compilation</h4><p>Webpack官方文档中How to write a plugin章节有对compilation的详解。</p>\n<blockquote>\n<p>A compilation object represents a single build of versioned assets. While running Webpack development middleware, a new compilation will be created each time a file change is detected, thus generating a new set of compiled assets. A compilation surfaces information about the present state of module resources, compiled assets, changed files, and watched dependencies.</p>\n</blockquote>\n<p>compilation对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。compilation对象包含当前模块资源、待编译文件、有改动的文件和监听依赖的所有信息。</p>\n<p>与compilation对应的有个compiler对象，通过对比，可以帮助大家对compilation有更深入的理解。</p>\n<h4 id=\"1-2、compiler\"><a href=\"#1-2、compiler\" class=\"headerlink\" title=\"1.2、compiler\"></a>1.2、compiler</h4><blockquote>\n<p>The compiler object represents the fully configured Webpack environment. This object is built once upon starting Webpack, and is configured with all operational settings including options, loaders, and plugins.</p>\n</blockquote>\n<p>compiler对象代表的是配置完备的Webpack环境。 compiler对象只在Webpack启动时构建一次，由Webpack组合所有的配置项构建生成。</p>\n<p>简单的讲，compiler对象代表的是不变的webpack环境，是针对webpack的；而compilation对象针对的是随时可变的项目文件，只要文件有改动，compilation就会被重新创建。</p>\n<h4 id=\"1-3、使用对比\"><a href=\"#1-3、使用对比\" class=\"headerlink\" title=\"1.3、使用对比\"></a>1.3、使用对比</h4><p>compilation在项目中任何一个文件改动后就会被重新创建，然后webpack计算新的compilation的hash值，这个hash值便是<code>hash</code>。</p>\n<p>如果使用hash作为编译输出文件的hash指纹的话，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash:8].js'</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/build'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hash是compilation对象计算所得，而不是具体的项目文件计算所得。所以以上配置的编译输出文件，所有的文件名都会使用相同的hash指纹。如下：</p>\n<p><img src=\"https://lh3.googleusercontent.com/-wlJUDhxMPqU/Wh7zMZjuqfI/AAAAAAAAABk/IhEtsJXAHL0bPovXAgeSV4NB7e-UWXjsQCHMYCw/I/15119373145001.jpg\" alt=\"\"><br>这样带来的问题是，三个js文件任何一个改动都会影响另外两个文件的最终文件名。上线后，另外两个文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。</p>\n<p>那么如何避免这个问题呢？答案就是chunkhash！</p>\n<p>根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[chunkhash:8].js'</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/build'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译输出的文件为：</p>\n<p><img src=\"https://lh3.googleusercontent.com/-SrxuYiL3LV8/Wh7zM3v49mI/AAAAAAAAABo/empy-1upuAsdOf5JQjUYV0_lfdLKbX5ywCHMYCw/I/15119400009939.jpg\" alt=\"\"><br>每个文件的hash指纹都不相同，上线后无改动的文件不会失去缓存。</p>\n<blockquote>\n<p>不要在开发环境使用 [chunkhash]/[hash]/[contenthash]，因为不需要在开发环境做持久缓存，而且这样会增加编译时间，开发环境用 [name] 就可以了。</p>\n</blockquote>\n<h3 id=\"2、contenthash\"><a href=\"#2、contenthash\" class=\"headerlink\" title=\"2、contenthash\"></a>2、contenthash</h3><p>webpack将style视为js的一部分，所以在计算chunkhash时，会把所有的js代码和style代码混合在一起计算。比如main.js引用了main.scss:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;main.scss&apos;;</span><br><span class=\"line\">alert(&apos;I am main.js&apos;);</span><br></pre></td></tr></table></figure>\n<p>main.scss的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    color: #000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack计算chunkhash时，以main.js文件为编译入口，整个chunk的内容会将main.scss的内容也计算在内：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    color: #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(&apos;I am main.js&apos;);</span><br></pre></td></tr></table></figure>\n<p>所以，不论是修改了js代码还是scss代码，整个chunk的内容都改变了，计算所得的chunkhash自然就不同了。</p>\n<p>我们一般会通过<code>extract-text-webpack-plugin</code>将样式文件单独抽取出来，但是不管是不是抽取出来了，chunkhash的计算方式还是合在一起算的， js 和 css 输出的文件用的是同一个 chunkhash，所以还是会存在问题。不过，该插件提供了另外一种hash值：<code>contenthash</code>。</p>\n<p>顾名思义，contenthash代表的是文本文件内容的hash值，也就是只有style文件的hash值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new ExtractTextPlugin(&apos;[name].[contenthash].css&apos;);</span><br></pre></td></tr></table></figure>\n<p>这样，编译出来的js和css文件将会有独立的hash指纹。并且如果我们只是修改了js代码，css的hash值也不会变化的。</p>\n<p>但是，反过来看，当我们如果修改css文件的时候，会发现js的hash还是会变化，还是因为之前提到的，chunkhash会计算js和css为入口，就算css已经提出去了。那么怎么去解决呢？</p>\n<h3 id=\"3、入坑webpack-md5-hash\"><a href=\"#3、入坑webpack-md5-hash\" class=\"headerlink\" title=\"3、入坑webpack-md5-hash\"></a>3、入坑webpack-md5-hash</h3><p>webpack-md5-hash做了些什么？<br>这里提到一个概念叫<code>chunk-hash</code>，并不是webpack中另一种hash值，而是compilation执行生命周期中的一个钩子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.applyPlugins(&quot;chunk-hash&quot;, chunk, chunkHash);</span><br></pre></td></tr></table></figure>\n<p>chunk-hash是在<code>chunhash计算完毕之后执行的</code>，这就意味着如果我们在chunk-hash钩子中可以用新的chunkhash替换已存在的值。webpack-md5-hash便是如此实现的，用了另外一种计算方式，去生成hash值。</p>\n<p>看上去一切都很美好，使用了webpack-md5-hash之后，我们去修改css文件的时候，会发现js的hash没有发生变化。那么webpack-md5-hash到底做了些什么？</p>\n<h4 id=\"3-1-webpack-md5-hash做了什么？\"><a href=\"#3-1-webpack-md5-hash做了什么？\" class=\"headerlink\" title=\"3.1 webpack-md5-hash做了什么？\"></a>3.1 webpack-md5-hash做了什么？</h4><p><img src=\"https://lh3.googleusercontent.com/-FHhesndXOUY/Wh7zNFCIjrI/AAAAAAAAABs/pfTwbRJhcJIVDxYOxWbRAMZqASq52iVXQCHMYCw/I/15119733897082.jpg\" alt=\"\"></p>\n<p>通过模块路径来排序 chunk 的所有依赖模块（仅这个 chunk 中的模块，不含被 CommonsChunkPlugin 剔除的模块），并将这些排序后的模块源代码拼接，最后用 MD5 拼接后内容的 chunkhash。插件这么做的好处是，使 chunkhash 与该 chunk 内代码做直接关联，让 chunk 与其依赖的模块 ID 无关化，无论模块 ID 如何变化，都不会影响父 chunk 的实质内容及 chunkhash。</p>\n<h4 id=\"3-2-存在的问题？\"><a href=\"#3-2-存在的问题？\" class=\"headerlink\" title=\"3.2 存在的问题？\"></a>3.2 存在的问题？</h4><ul>\n<li>当仅有modules id发生改变的时候，hash值不会发生变化（<a href=\"https://github.com/erm0l0v/webpack-md5-hash/issues/7\" target=\"_blank\" rel=\"noopener\">https://github.com/erm0l0v/webpack-md5-hash/issues/7</a> ）</li>\n<li><p>它的计算方法是只计算模块本身的当前内容（包括同步模块），也就是上文的代码。这种计算方式把异步模块的内容忽略掉了。也就是说，<code>主文件计算hash值时没有把异步模块的内容计算在内</code>。</p>\n<p><img src=\"https://lh3.googleusercontent.com/-to9DqvWoUYY/Wh7zNoLxVyI/AAAAAAAAABw/P3PZbCWJBegTFfml526mt5eiq7HMMbesACHMYCw/I/15119741407593.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"3-3-异步模块问题如何导致的\"><a href=\"#3-3-异步模块问题如何导致的\" class=\"headerlink\" title=\"3.3 异步模块问题如何导致的?\"></a>3.3 异步模块问题如何导致的?</h4><p>例如：入口文件main.app.js的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;../style/main.app.scss&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;main&apos;);</span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    require.ensure([],(require)=&gt;&#123;</span><br><span class=\"line\">        require(&apos;./part.a.js&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步模块part.a.js代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;part a&apos;);</span><br><span class=\"line\">setTimeout(()=&gt;&#123;</span><br><span class=\"line\">    require.ensure([],(require)=&gt;&#123;</span><br><span class=\"line\">        require(&apos;./part.b.js&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,10000);</span><br></pre></td></tr></table></figure>\n<p>异步模块part.b.js代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import fn_c from &apos;./part.c.js&apos;;</span><br><span class=\"line\">import fn_d from &apos;./part.d.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;part b&apos;);</span><br></pre></td></tr></table></figure>\n<p>使用webpack将以上源代码进行编译，输出以下文件：</p>\n<hr>\n<ul>\n<li>main.app.[chunkhash].js：主文件；</li>\n<li>part.a.[chunkhash].js：异步模块a；</li>\n<li>part.b.[chunkhash].js：异步模块b；</li>\n<li>main.app.[chunkhash].css：样式文件。</li>\n</ul>\n<hr>\n<p>如果我们修改了part.a.js源码，编译的结果文件哪些文件的hash改变了？ 答案是：只有part.a.[chunkhash].js的hash改变了，其余文件的hash都与修改前一致。那么这种结果是否合理呢？</p>\n<p>我们首先了解一下webpack runtime是如何加载异步模块的？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var head = document.getElementsByTagName(&apos;head&apos;)[0];</span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">script.type = &apos;text/javascript&apos;;</span><br><span class=\"line\">script.charset = &apos;utf-8&apos;;</span><br><span class=\"line\">script.async = true;</span><br><span class=\"line\"></span><br><span class=\"line\">script.src = __webpack_require__.p + &quot;js/part/part.&quot; + (&#123;</span><br><span class=\"line\">    &quot;1&quot;: &quot;a&quot;,</span><br><span class=\"line\">    &quot;2&quot;: &quot;b&quot;</span><br><span class=\"line\">    &#125;[chunkId] || chunkId) + &quot;.&quot; + &#123;</span><br><span class=\"line\">    &quot;1&quot;: &quot;f5ea7d95&quot;,</span><br><span class=\"line\">    &quot;2&quot;: &quot;b93662b0&quot;</span><br><span class=\"line\">&#125;[chunkId] + &quot;.js&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">head.appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>上述代码是编译生成的main.app.[chunkhash].js中实现懒加载的逻辑，原理就是大家熟知的动态生成script标签。但是在对script.src赋值时，webpack有以下三个概念需要知晓：</p>\n<hr>\n<ul>\n<li>chunkId，对应上述代码中的”1”和”2”；</li>\n<li>chunkName，对应上述代码中的”a”和”b”；</li>\n<li>chunkHash，对应上述代码中的”f5ea7d95”和”b93662b0”。</li>\n</ul>\n<hr>\n<p>也就是说，part.a.[chunkhash].js和part.b.[chunkhash].js的hash值是写死在main.app.[chunkhash].js中的。按照之前的编译结果，part.a.[chunkhash].js的hash变了，但是main.app.[chunkhash].js的hash没变，那么用户的浏览器仍然缓存着旧版本的main.app.[chunkhash].js，此时异步加载的part.a.[chunkhash].js仍然是旧版本的文件。这显然是不符合需求的。</p>\n<p>因此懒加载模块的改动经编译，去引用的主文件的hash值没有变化，影响了版本发布。<br>所以建议在采用这种插件的时候，一定要搞清楚它的原理和做的事情，否则容易入坑。</p>\n<h3 id=\"4、不稳定的chunkhash\"><a href=\"#4、不稳定的chunkhash\" class=\"headerlink\" title=\"4、不稳定的chunkhash\"></a>4、不稳定的chunkhash</h3><p>计算 chunk MD5 摘要并修改 chunk 资源文件名是不够的，Chunk 的生成还涉及到依赖解析和模块 ID 分配，例如：我们都会在 webpack 里面定义 common chunk 提取公共代码，虽然只修改了 app.js 的代码，但在最终的构建结果中，vendor.js 的 chunkhash 也被修改了，尽管 vendor.js 的内容没有实质变化。这样我们无法提高缓存的利用率。</p>\n<h4 id=\"4-1、编译中会导致缓存失效的因素\"><a href=\"#4-1、编译中会导致缓存失效的因素\" class=\"headerlink\" title=\"4.1、编译中会导致缓存失效的因素\"></a>4.1、编译中会导致缓存失效的因素</h4><p>在一个 webpack 编译出的分块 (chunk) 文件中，内容分为如下四部分：</p>\n<ul>\n<li>包含的模块的源代码</li>\n<li>webpack 生成的模块 id (module id) (包括包含的模块 id, 以及该模块引用的依赖模块的 id)</li>\n<li>webpack 用于启动运行的 bootstrap runtime</li>\n<li>Chunk ID</li>\n</ul>\n<p>那块这些情况会导致缓存失效：</p>\n<h5 id=\"1、源代码的变更\"><a href=\"#1、源代码的变更\" class=\"headerlink\" title=\"1、源代码的变更\"></a>1、源代码的变更</h5><p>这个不说了</p>\n<h5 id=\"2、webpack-生成的模块-id变动\"><a href=\"#2、webpack-生成的模块-id变动\" class=\"headerlink\" title=\"2、webpack 生成的模块 id变动\"></a>2、webpack 生成的模块 id变动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123; // webpackBootstrap</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\">/* 0 */</span><br><span class=\"line\">/***/ function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">    __webpack_require__(1);</span><br><span class=\"line\">    module.exports = &apos;entry_1.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;,</span><br><span class=\"line\">/* 1 */</span><br><span class=\"line\">/***/ function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">    __webpack_require__(2);</span><br><span class=\"line\">    module.exports = &apos;test_1.js&apos;;</span><br><span class=\"line\">/***/ &#125;,</span><br><span class=\"line\">/* 2 */</span><br><span class=\"line\">/***/ function(module, exports) &#123;</span><br><span class=\"line\">    module.exports = &apos;test_2.js&apos;;</span><br><span class=\"line\">/***/ &#125;</span><br><span class=\"line\">/******/ ])</span><br></pre></td></tr></table></figure>\n<p>如上，注释中的 /<em> 0 </em>/ … /<em> 1 </em>/ … 就是该模块对应的 id。<br>默认，模块的 ID 是 webpack 根据依赖的收集顺序递增的正整数，这种 ID 分配方式不太稳定，。假设新增/删除一个模块引用，或者依赖的顺序变一下，计算结果就可能变化，导致一些模块 id 发生变化，最终导致输出 chunk 变化，缓存失效。这一条几乎会导致所有输出的分块内容都发生变化。</p>\n<p><code>如何解决这个问题？</code></p>\n<p>我们需要固定id的计算方式，那么一个模块文件的什么信息是固定的？ —–文件路径<br>可以使用两个插件来解决这个问题：</p>\n<ul>\n<li>NamedModulesPlugin</li>\n<li>HashedModuleIdsPlugin<br>他们都已经被添加到了webpack中，可以直接使用：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.HashedModuleIdsPlugin()</span><br></pre></td></tr></table></figure>\n<p>前者将递增 ID 替换为模块相对路径，可读性强，不过，构建出来的 chunk 会充满各种路径，使文件增大。后者是前者的进阶模块，它在其基础上对模块路径进行 MD5 摘要。到此module id的生成规则稳定下来。</p>\n<h5 id=\"3、webpack-bootstrap-runtime-变动\"><a href=\"#3、webpack-bootstrap-runtime-变动\" class=\"headerlink\" title=\"3、webpack bootstrap runtime 变动\"></a>3、webpack bootstrap runtime 变动</h5><p>上面的代码里 /<em> 0 </em>/ … /<em> 1 </em>/ … 对应的都是模块定义，要让程序运行起来还需要一小段启动代码，这个就是 webpack bootstrap runtime，它长这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(modules) &#123; // webpackBootstrap</span><br><span class=\"line\">/******/    // The module cache</span><br><span class=\"line\">/******/    var installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // The require function</span><br><span class=\"line\">/******/    function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Check if module is in cache</span><br><span class=\"line\">/******/        if(installedModules[moduleId])</span><br><span class=\"line\">/******/            return installedModules[moduleId].exports;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Create a new module (and put it into the cache)</span><br><span class=\"line\">/******/        var module = installedModules[moduleId] = &#123;</span><br><span class=\"line\">/******/            exports: &#123;&#125;,</span><br><span class=\"line\">/******/            id: moduleId,</span><br><span class=\"line\">/******/            loaded: false</span><br><span class=\"line\">/******/        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Execute the module function</span><br><span class=\"line\">/******/        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Flag the module as loaded</span><br><span class=\"line\">/******/        module.loaded = true;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // Return the exports of the module</span><br><span class=\"line\">/******/        return module.exports;</span><br><span class=\"line\">/******/    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // expose the modules object (__webpack_modules__)</span><br><span class=\"line\">/******/    __webpack_require__.m = modules;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // expose the module cache</span><br><span class=\"line\">/******/    __webpack_require__.c = installedModules;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // __webpack_public_path__</span><br><span class=\"line\">/******/    __webpack_require__.p = &quot;/build/&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/    // Load entry module and return exports</span><br><span class=\"line\">/******/    return __webpack_require__(0);</span><br><span class=\"line\">/******/ &#125;)(/* modules */)</span><br></pre></td></tr></table></figure>\n<p>其他的都是配置项，启动程序的代码在这一个函数的最后一行：return <strong>webpack_require</strong>(0);，立即执行 id 为0的模块。</p>\n<p>这么看好像每次编译的时候这个 runtime 不会有什么变化，然而实际项目中往往为了缓存利用率以及按需加载引入了多个分块 (chunk)，包括公共分块和按需加载的分块。我们可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/******/    // This file contains only the entry chunk.</span><br><span class=\"line\">/******/    // The chunk loading function for additional chunks</span><br><span class=\"line\">/******/    __webpack_require__.e = function requireEnsure(chunkId, callback) &#123;</span><br><span class=\"line\">/******/        // &quot;0&quot; is the signal for &quot;already loaded&quot;</span><br><span class=\"line\">/******/        if(installedChunks[chunkId] === 0)</span><br><span class=\"line\">/******/            return callback.call(null, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">/******/        // an array means &quot;currently loading&quot;.</span><br><span class=\"line\">/******/        if(installedChunks[chunkId] !== undefined) &#123;</span><br><span class=\"line\">/******/            installedChunks[chunkId].push(callback);</span><br><span class=\"line\">/******/        &#125; else &#123;</span><br><span class=\"line\">/******/            // start chunk loading</span><br><span class=\"line\">/******/            installedChunks[chunkId] = [callback];</span><br><span class=\"line\">/******/            var head = document.getElementsByTagName(&apos;head&apos;)[0];</span><br><span class=\"line\">/******/            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">/******/            script.type = &apos;text/javascript&apos;;</span><br><span class=\"line\">/******/            script.charset = &apos;utf-8&apos;;</span><br><span class=\"line\">/******/            script.async = true;</span><br><span class=\"line\"></span><br><span class=\"line\">/******/            script.src = __webpack_require__.p + &quot;&quot; + chunkId + &quot;.&quot; + (&#123;&quot;0&quot;:&quot;e_1&quot;,&quot;1&quot;:&quot;e_2&quot;&#125;[chunkId]||chunkId) + &quot;.&quot; + &#123;&quot;0&quot;:&quot;d0c1831ff024c3aeb47a&quot;,&quot;1&quot;:&quot;50dc9cf2b5e52bc9e61a&quot;&#125;[chunkId] + &quot;.js&quot;;</span><br><span class=\"line\">/******/            head.appendChild(script);</span><br><span class=\"line\">/******/        &#125;</span><br><span class=\"line\">/******/    &#125;;</span><br></pre></td></tr></table></figure>\n<p>这个时候我们可以看看到，最后会有一个文件名映射表，它包含chunks ID 及其对应 chunkhash 的对象，那么runtime 中的文件名映射就跟着改了，这个分块也就被修改了。</p>\n<p><code>如何解决这个问题？</code><br>runtime中变动的就是其中的文件名信息，我们把这总是变动的部分单独拎出来，不要让它影响公共分块或者入口分块。<br>CommonsChunkPlugin可以帮我们抽取出来：</p>\n<blockquote>\n<p>CommonsChunkPlugin 可以用于将模块分离到单独的文件中。然而 CommonsChunkPlugin 有一个较少有人知道的功能是，能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定 entry 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">  name: &apos;vendor&apos;,</span><br><span class=\"line\">  minChunks: Infinity</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">  name: &apos;manifest&apos;</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>这样就会生成一个特别小（不足 2kb）的 manifest.js解决了 libs 经常被更新的问题。同时我们可以使用<a href=\"https://github.com/szrenwei/inline-manifest-webpack-plugin\" target=\"_blank\" rel=\"noopener\">inline-manifest-webpack-plugin</a>将 manifest 转为内联在 html 内的 inline script</p>\n<h5 id=\"4、Chunk-ID变动\"><a href=\"#4、Chunk-ID变动\" class=\"headerlink\" title=\"4、Chunk ID变动\"></a>4、Chunk ID变动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpackJsonp([0,1],[</span><br><span class=\"line\">/* 0 */</span><br><span class=\"line\">/***/ function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    __webpack_require__(1);</span><br><span class=\"line\">    module.exports = &apos;entry.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;,</span><br><span class=\"line\">/* 1 */</span><br><span class=\"line\">/***/ function(module, exports) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    module.exports = &apos;test.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>这里函数调用的第一个参数 [0,1] 就对应了这个分块的 id。<br>同模块 id 一样, 分块 id 的计算与分块引入顺序有关，官方有提供NamedChunksPlugin插件来根据文件名来稳定你的chunkid。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.NamedChunksPlugin()</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、总结\"><a href=\"#5、总结\" class=\"headerlink\" title=\"5、总结\"></a>5、总结</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: &apos;[name].[chunkhash].js&apos;,</span><br><span class=\"line\">    chunkFilename: &apos;[name].[chunkhash].js&apos;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    // 单独提取 webpack runtime manifest</span><br><span class=\"line\">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;manifest&apos;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &apos;src/pages/index.ejs&apos;,</span><br><span class=\"line\">      chunks: [&apos;manifest&apos;,  &apos;vendor&apos;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    //内联manifest</span><br><span class=\"line\">    new InlineManifestWebpackPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用文件路径当 id，固定module id</span><br><span class=\"line\">    new webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">    // 文件名固定chunk id</span><br><span class=\"line\">    new webpack.NamedChunksPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">    //css 输出按实际内容计算 hash</span><br><span class=\"line\">    new ExtractTextWebpackPlugin(&#123;filename: &apos;[name].[contenthash].css&apos;&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>"},{"title":"使用说明","author":"System","_content":"请按以下步骤发表博文:\n\n## 1、全局安装hexo\n\n``` bash\n$ npm install hexo -g\n```\n\n## 2、Clone 源代码\n\n*master分支存放编译后的代码（html, js, css）,该分支不要改动。*\n*source分支存放源代码包含Markdown文件, 需要编写发布博文,请先切换到该分支。*\n\n仓库地址:&nbsp;&nbsp;&nbsp;&nbsp;https://github.com/osxfe/osxfe.github.io\n\n\n## 3、新建博文\n\n``` bash\n$ hexo new \"My New Blog\"\n```\n\n## 4、本地调试\n\n``` bash\n$ hexo server\n```\n\n## 5、生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n## 6、发布\n\n``` bash\n$ hexo deploy\n```\n","source":"_posts/guide-paper.md","raw":"---\ntitle: 使用说明\nauthor: System\n---\n请按以下步骤发表博文:\n\n## 1、全局安装hexo\n\n``` bash\n$ npm install hexo -g\n```\n\n## 2、Clone 源代码\n\n*master分支存放编译后的代码（html, js, css）,该分支不要改动。*\n*source分支存放源代码包含Markdown文件, 需要编写发布博文,请先切换到该分支。*\n\n仓库地址:&nbsp;&nbsp;&nbsp;&nbsp;https://github.com/osxfe/osxfe.github.io\n\n\n## 3、新建博文\n\n``` bash\n$ hexo new \"My New Blog\"\n```\n\n## 4、本地调试\n\n``` bash\n$ hexo server\n```\n\n## 5、生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n## 6、发布\n\n``` bash\n$ hexo deploy\n```\n","slug":"guide-paper","published":1,"date":"2018-04-18T08:59:11.707Z","updated":"2018-04-18T08:59:11.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnn6in9c0006owt1n9lpywie","content":"<p>请按以下步骤发表博文:</p>\n<h2 id=\"1、全局安装hexo\"><a href=\"#1、全局安装hexo\" class=\"headerlink\" title=\"1、全局安装hexo\"></a>1、全局安装hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、Clone-源代码\"><a href=\"#2、Clone-源代码\" class=\"headerlink\" title=\"2、Clone 源代码\"></a>2、Clone 源代码</h2><p><em>master分支存放编译后的代码（html, js, css）,该分支不要改动。</em><br><em>source分支存放源代码包含Markdown文件, 需要编写发布博文,请先切换到该分支。</em></p>\n<p>仓库地址:&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://github.com/osxfe/osxfe.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/osxfe/osxfe.github.io</a></p>\n<h2 id=\"3、新建博文\"><a href=\"#3、新建博文\" class=\"headerlink\" title=\"3、新建博文\"></a>3、新建博文</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Blog\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4、本地调试\"><a href=\"#4、本地调试\" class=\"headerlink\" title=\"4、本地调试\"></a>4、本地调试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、生成静态文件\"><a href=\"#5、生成静态文件\" class=\"headerlink\" title=\"5、生成静态文件\"></a>5、生成静态文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、发布\"><a href=\"#6、发布\" class=\"headerlink\" title=\"6、发布\"></a>6、发布</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>请按以下步骤发表博文:</p>\n<h2 id=\"1、全局安装hexo\"><a href=\"#1、全局安装hexo\" class=\"headerlink\" title=\"1、全局安装hexo\"></a>1、全局安装hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、Clone-源代码\"><a href=\"#2、Clone-源代码\" class=\"headerlink\" title=\"2、Clone 源代码\"></a>2、Clone 源代码</h2><p><em>master分支存放编译后的代码（html, js, css）,该分支不要改动。</em><br><em>source分支存放源代码包含Markdown文件, 需要编写发布博文,请先切换到该分支。</em></p>\n<p>仓库地址:&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://github.com/osxfe/osxfe.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/osxfe/osxfe.github.io</a></p>\n<h2 id=\"3、新建博文\"><a href=\"#3、新建博文\" class=\"headerlink\" title=\"3、新建博文\"></a>3、新建博文</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Blog\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4、本地调试\"><a href=\"#4、本地调试\" class=\"headerlink\" title=\"4、本地调试\"></a>4、本地调试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、生成静态文件\"><a href=\"#5、生成静态文件\" class=\"headerlink\" title=\"5、生成静态文件\"></a>5、生成静态文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、发布\"><a href=\"#6、发布\" class=\"headerlink\" title=\"6、发布\"></a>6、发布</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n"},{"title":"SourceMap In Action | SourceMap 实践","author":"GG","_content":"# SourceMap 解析\n## 资料：\n- SourceMap文件格式\n    - http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\n    - http://www.alloyteam.com/2014/01/source-map-version-3-introduction/\n\n## 如何映射\n- 本地保存文件映射，本地保存文件\n- 直接在文件末尾注明位置\n    - 以JS为例: `//@ sourceMappingURL=target.js.map`\n    - 自己按照URL去映射，对解析工具必须可访问\n\n## JS 异常如何解析\nprototype: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n```\nError.prototype\nError.prototype.columnNumber : 非标准\nError.prototype.fileName : 非标准\nError.prototype.lineNumber: 非标准\nError.prototype.message\nError.prototype.name\nError.prototype.stack\nMethods\nError.prototype.toSource(): 非标准\nError.prototype.toString()\n```\n\n![](http://ollp6yeja.bkt.clouddn.com/15138389202320.jpg)\n\nstack属性\n ![](http://ollp6yeja.bkt.clouddn.com/15138390172962.jpg)\n\n\n### 定位位置 = 解析`Error.prototype.stack`\n- 构造: new Error(name)\n- 默认toString = e.type : e.name\n- e.stack = `toString()\\n + stack frames`\n- 过程：解析stack frames -> 获取sourcemap -> consumeSourceMap -> 获取Mapping\n\n### 结果\n```\nTypeError: Cannot read property \\'toDate\\' of undefined    @ Object.onChange (https://osx.dpfile.com/app/overseas-bc-static/static/orderdetails.e91e32130b4a54ea9f01.js:1:722437)    @ t.n.handleChange (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918483)    @ n.clearSelection (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918308)    @ Object.r (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:211791)    @ i (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210137)    @ Object.s [as executeDispatchesInOrder] (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210327)    @ p (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175391)    @ m (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175517)\n```\n\n![](http://ollp6yeja.bkt.clouddn.com/15138403410332.jpg)\n\n\n\n\n\n","source":"_posts/sourcemap-in-action.md","raw":"---\ntitle: SourceMap In Action | SourceMap 实践\nauthor: GG\n---\n# SourceMap 解析\n## 资料：\n- SourceMap文件格式\n    - http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\n    - http://www.alloyteam.com/2014/01/source-map-version-3-introduction/\n\n## 如何映射\n- 本地保存文件映射，本地保存文件\n- 直接在文件末尾注明位置\n    - 以JS为例: `//@ sourceMappingURL=target.js.map`\n    - 自己按照URL去映射，对解析工具必须可访问\n\n## JS 异常如何解析\nprototype: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n```\nError.prototype\nError.prototype.columnNumber : 非标准\nError.prototype.fileName : 非标准\nError.prototype.lineNumber: 非标准\nError.prototype.message\nError.prototype.name\nError.prototype.stack\nMethods\nError.prototype.toSource(): 非标准\nError.prototype.toString()\n```\n\n![](http://ollp6yeja.bkt.clouddn.com/15138389202320.jpg)\n\nstack属性\n ![](http://ollp6yeja.bkt.clouddn.com/15138390172962.jpg)\n\n\n### 定位位置 = 解析`Error.prototype.stack`\n- 构造: new Error(name)\n- 默认toString = e.type : e.name\n- e.stack = `toString()\\n + stack frames`\n- 过程：解析stack frames -> 获取sourcemap -> consumeSourceMap -> 获取Mapping\n\n### 结果\n```\nTypeError: Cannot read property \\'toDate\\' of undefined    @ Object.onChange (https://osx.dpfile.com/app/overseas-bc-static/static/orderdetails.e91e32130b4a54ea9f01.js:1:722437)    @ t.n.handleChange (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918483)    @ n.clearSelection (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918308)    @ Object.r (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:211791)    @ i (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210137)    @ Object.s [as executeDispatchesInOrder] (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210327)    @ p (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175391)    @ m (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175517)\n```\n\n![](http://ollp6yeja.bkt.clouddn.com/15138403410332.jpg)\n\n\n\n\n\n","slug":"sourcemap-in-action","published":1,"date":"2018-04-18T08:59:11.708Z","updated":"2018-04-18T08:59:11.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnn6in9e0007owt144y3dp9y","content":"<h1 id=\"SourceMap-解析\"><a href=\"#SourceMap-解析\" class=\"headerlink\" title=\"SourceMap 解析\"></a>SourceMap 解析</h1><h2 id=\"资料：\"><a href=\"#资料：\" class=\"headerlink\" title=\"资料：\"></a>资料：</h2><ul>\n<li>SourceMap文件格式<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</a></li>\n<li><a href=\"http://www.alloyteam.com/2014/01/source-map-version-3-introduction/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/2014/01/source-map-version-3-introduction/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何映射\"><a href=\"#如何映射\" class=\"headerlink\" title=\"如何映射\"></a>如何映射</h2><ul>\n<li>本地保存文件映射，本地保存文件</li>\n<li>直接在文件末尾注明位置<ul>\n<li>以JS为例: <code>//@ sourceMappingURL=target.js.map</code></li>\n<li>自己按照URL去映射，对解析工具必须可访问</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JS-异常如何解析\"><a href=\"#JS-异常如何解析\" class=\"headerlink\" title=\"JS 异常如何解析\"></a>JS 异常如何解析</h2><p>prototype: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error.prototype</span><br><span class=\"line\">Error.prototype.columnNumber : 非标准</span><br><span class=\"line\">Error.prototype.fileName : 非标准</span><br><span class=\"line\">Error.prototype.lineNumber: 非标准</span><br><span class=\"line\">Error.prototype.message</span><br><span class=\"line\">Error.prototype.name</span><br><span class=\"line\">Error.prototype.stack</span><br><span class=\"line\">Methods</span><br><span class=\"line\">Error.prototype.toSource(): 非标准</span><br><span class=\"line\">Error.prototype.toString()</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ollp6yeja.bkt.clouddn.com/15138389202320.jpg\" alt=\"\"></p>\n<p>stack属性<br> <img src=\"http://ollp6yeja.bkt.clouddn.com/15138390172962.jpg\" alt=\"\"></p>\n<h3 id=\"定位位置-解析Error-prototype-stack\"><a href=\"#定位位置-解析Error-prototype-stack\" class=\"headerlink\" title=\"定位位置 = 解析Error.prototype.stack\"></a>定位位置 = 解析<code>Error.prototype.stack</code></h3><ul>\n<li>构造: new Error(name)</li>\n<li>默认toString = e.type : e.name</li>\n<li>e.stack = <code>toString()\\n + stack frames</code></li>\n<li>过程：解析stack frames -&gt; 获取sourcemap -&gt; consumeSourceMap -&gt; 获取Mapping</li>\n</ul>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypeError: Cannot read property \\&apos;toDate\\&apos; of undefined    @ Object.onChange (https://osx.dpfile.com/app/overseas-bc-static/static/orderdetails.e91e32130b4a54ea9f01.js:1:722437)    @ t.n.handleChange (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918483)    @ n.clearSelection (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918308)    @ Object.r (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:211791)    @ i (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210137)    @ Object.s [as executeDispatchesInOrder] (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210327)    @ p (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175391)    @ m (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175517)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ollp6yeja.bkt.clouddn.com/15138403410332.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SourceMap-解析\"><a href=\"#SourceMap-解析\" class=\"headerlink\" title=\"SourceMap 解析\"></a>SourceMap 解析</h1><h2 id=\"资料：\"><a href=\"#资料：\" class=\"headerlink\" title=\"资料：\"></a>资料：</h2><ul>\n<li>SourceMap文件格式<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</a></li>\n<li><a href=\"http://www.alloyteam.com/2014/01/source-map-version-3-introduction/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/2014/01/source-map-version-3-introduction/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何映射\"><a href=\"#如何映射\" class=\"headerlink\" title=\"如何映射\"></a>如何映射</h2><ul>\n<li>本地保存文件映射，本地保存文件</li>\n<li>直接在文件末尾注明位置<ul>\n<li>以JS为例: <code>//@ sourceMappingURL=target.js.map</code></li>\n<li>自己按照URL去映射，对解析工具必须可访问</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JS-异常如何解析\"><a href=\"#JS-异常如何解析\" class=\"headerlink\" title=\"JS 异常如何解析\"></a>JS 异常如何解析</h2><p>prototype: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error.prototype</span><br><span class=\"line\">Error.prototype.columnNumber : 非标准</span><br><span class=\"line\">Error.prototype.fileName : 非标准</span><br><span class=\"line\">Error.prototype.lineNumber: 非标准</span><br><span class=\"line\">Error.prototype.message</span><br><span class=\"line\">Error.prototype.name</span><br><span class=\"line\">Error.prototype.stack</span><br><span class=\"line\">Methods</span><br><span class=\"line\">Error.prototype.toSource(): 非标准</span><br><span class=\"line\">Error.prototype.toString()</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ollp6yeja.bkt.clouddn.com/15138389202320.jpg\" alt=\"\"></p>\n<p>stack属性<br> <img src=\"http://ollp6yeja.bkt.clouddn.com/15138390172962.jpg\" alt=\"\"></p>\n<h3 id=\"定位位置-解析Error-prototype-stack\"><a href=\"#定位位置-解析Error-prototype-stack\" class=\"headerlink\" title=\"定位位置 = 解析Error.prototype.stack\"></a>定位位置 = 解析<code>Error.prototype.stack</code></h3><ul>\n<li>构造: new Error(name)</li>\n<li>默认toString = e.type : e.name</li>\n<li>e.stack = <code>toString()\\n + stack frames</code></li>\n<li>过程：解析stack frames -&gt; 获取sourcemap -&gt; consumeSourceMap -&gt; 获取Mapping</li>\n</ul>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypeError: Cannot read property \\&apos;toDate\\&apos; of undefined    @ Object.onChange (https://osx.dpfile.com/app/overseas-bc-static/static/orderdetails.e91e32130b4a54ea9f01.js:1:722437)    @ t.n.handleChange (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918483)    @ n.clearSelection (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:918308)    @ Object.r (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:211791)    @ i (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210137)    @ Object.s [as executeDispatchesInOrder] (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:210327)    @ p (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175391)    @ m (https://osx.dpfile.com/app/overseas-bc-static/static/dll.min.d1c4244bfbd687f19b9c4c171fd79de1.js:1:175517)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ollp6yeja.bkt.clouddn.com/15138403410332.jpg\" alt=\"\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnn6in930000owt1heqrzni7","category_id":"cjnn6in990003owt1pql8ucru","_id":"cjnn6in9g000bowt13vetccal"},{"post_id":"cjnn6in980002owt1sw84rbul","category_id":"cjnn6in9e0008owt1s2e7rbqs","_id":"cjnn6in9i000fowt1771g19fw"},{"post_id":"cjnn6in9b0005owt1tjdig3zj","category_id":"cjnn6in9e0008owt1s2e7rbqs","_id":"cjnn6in9i000howt1wjc6xev4"}],"PostTag":[{"post_id":"cjnn6in930000owt1heqrzni7","tag_id":"cjnn6in9b0004owt1kfsg7wy7","_id":"cjnn6in9f000aowt1pnfwa085"},{"post_id":"cjnn6in980002owt1sw84rbul","tag_id":"cjnn6in9e0009owt1zrswoaav","_id":"cjnn6in9h000eowt1hay9ufjh"},{"post_id":"cjnn6in9b0005owt1tjdig3zj","tag_id":"cjnn6in9g000dowt12yazq6yd","_id":"cjnn6in9i000gowt16affr42s"}],"Tag":[{"name":"-node -async_hooks","_id":"cjnn6in9b0004owt1kfsg7wy7"},{"name":"-React -ES6","_id":"cjnn6in9e0009owt1zrswoaav"},{"name":"-Webpack -ES6","_id":"cjnn6in9g000dowt12yazq6yd"}]}}